import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { KendraServiceException as __BaseException } from "../models/KendraServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, InvalidRequestException, ResourceAlreadyExistException, ResourceInUseException, ResourceNotFoundException, ResourceUnavailableException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const serializeAws_json1_1AssociateEntitiesToExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.AssociateEntitiesToExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AssociateEntitiesToExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1AssociatePersonasToEntitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.AssociatePersonasToEntities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1AssociatePersonasToEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchDeleteDocumentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.BatchDeleteDocument",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchDeleteDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetDocumentStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.BatchGetDocumentStatus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetDocumentStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchPutDocumentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.BatchPutDocument",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchPutDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ClearQuerySuggestionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ClearQuerySuggestions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ClearQuerySuggestionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateAccessControlConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateAccessControlConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateAccessControlConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateDataSourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateDataSource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateDataSourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateFaqCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateFaq",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateFaqRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateIndexCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateIndex",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateQuerySuggestionsBlockList",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateQuerySuggestionsBlockListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateThesaurusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.CreateThesaurus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateThesaurusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteAccessControlConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteAccessControlConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteAccessControlConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteDataSourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteDataSource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteDataSourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteFaqCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteFaq",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteFaqRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteIndexCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteIndex",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeletePrincipalMappingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeletePrincipalMapping",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeletePrincipalMappingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteQuerySuggestionsBlockList",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteQuerySuggestionsBlockListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteThesaurusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DeleteThesaurus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteThesaurusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeAccessControlConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeAccessControlConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeAccessControlConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeDataSourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeDataSource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeDataSourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeFaqCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeFaq",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeFaqRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeIndexCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeIndex",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribePrincipalMappingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribePrincipalMapping",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePrincipalMappingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeQuerySuggestionsBlockList",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeQuerySuggestionsBlockListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeQuerySuggestionsConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeQuerySuggestionsConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeQuerySuggestionsConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeThesaurusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DescribeThesaurus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeThesaurusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DisassociateEntitiesFromExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DisassociateEntitiesFromExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisassociateEntitiesFromExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DisassociatePersonasFromEntitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.DisassociatePersonasFromEntities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DisassociatePersonasFromEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetQuerySuggestionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.GetQuerySuggestions",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetQuerySuggestionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.GetSnapshots",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListAccessControlConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListAccessControlConfigurations",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListAccessControlConfigurationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDataSourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListDataSources",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDataSourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListDataSourceSyncJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListDataSourceSyncJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListDataSourceSyncJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListEntityPersonasCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListEntityPersonas",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEntityPersonasRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListExperienceEntitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListExperienceEntities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListExperienceEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListExperiencesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListExperiences",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListExperiencesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListFaqsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListFaqs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListFaqsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListGroupsOlderThanOrderingIdCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListGroupsOlderThanOrderingId",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListGroupsOlderThanOrderingIdRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListIndicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListIndices",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListIndicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListQuerySuggestionsBlockListsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListQuerySuggestionsBlockLists",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListQuerySuggestionsBlockListsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListTagsForResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListThesauriCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.ListThesauri",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListThesauriRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutPrincipalMappingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.PutPrincipalMapping",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutPrincipalMappingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1QueryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.Query",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1QueryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartDataSourceSyncJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.StartDataSourceSyncJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartDataSourceSyncJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopDataSourceSyncJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.StopDataSourceSyncJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopDataSourceSyncJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1SubmitFeedbackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.SubmitFeedback",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SubmitFeedbackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.TagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UntagResource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateAccessControlConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateAccessControlConfiguration",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateAccessControlConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateDataSourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateDataSource",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateDataSourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateExperienceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateExperience",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateExperienceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateIndexCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateIndex",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateIndexRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateQuerySuggestionsBlockListCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateQuerySuggestionsBlockList",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateQuerySuggestionsBlockListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateQuerySuggestionsConfigCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateQuerySuggestionsConfig",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateQuerySuggestionsConfigRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateThesaurusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSKendraFrontendService.UpdateThesaurus",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateThesaurusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1AssociateEntitiesToExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateEntitiesToExperienceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AssociateEntitiesToExperienceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1AssociateEntitiesToExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistException":
        case "com.amazonaws.kendra#ResourceAlreadyExistException":
            throw await deserializeAws_json1_1ResourceAlreadyExistExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1AssociatePersonasToEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociatePersonasToEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1AssociatePersonasToEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1AssociatePersonasToEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistException":
        case "com.amazonaws.kendra#ResourceAlreadyExistException":
            throw await deserializeAws_json1_1ResourceAlreadyExistExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchDeleteDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchDeleteDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchDeleteDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchDeleteDocumentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetDocumentStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetDocumentStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetDocumentStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetDocumentStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchPutDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchPutDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchPutDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchPutDocumentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ClearQuerySuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ClearQuerySuggestionsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ClearQuerySuggestionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAccessControlConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateAccessControlConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateAccessControlConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDataSourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateDataSourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateDataSourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistException":
        case "com.amazonaws.kendra#ResourceAlreadyExistException":
            throw await deserializeAws_json1_1ResourceAlreadyExistExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateExperienceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateExperienceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateFaqCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateFaqResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateFaqCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateIndexCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateIndexResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistException":
        case "com.amazonaws.kendra#ResourceAlreadyExistException":
            throw await deserializeAws_json1_1ResourceAlreadyExistExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateQuerySuggestionsBlockListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateQuerySuggestionsBlockListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateQuerySuggestionsBlockListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateThesaurusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateThesaurusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateThesaurusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAccessControlConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteAccessControlConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteAccessControlConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDataSourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteDataSourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteExperienceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteExperienceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteFaqCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteFaqCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteIndexCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeletePrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePrincipalMappingCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeletePrincipalMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteQuerySuggestionsBlockListCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteQuerySuggestionsBlockListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteThesaurusCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteThesaurusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAccessControlConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeAccessControlConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeAccessControlConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDataSourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeDataSourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeDataSourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeExperienceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeExperienceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeFaqCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeFaqCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeFaqResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeFaqCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeIndexCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeIndexResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribePrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePrincipalMappingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePrincipalMappingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribePrincipalMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeQuerySuggestionsBlockListCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeQuerySuggestionsBlockListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeQuerySuggestionsBlockListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeQuerySuggestionsConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeQuerySuggestionsConfigCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeQuerySuggestionsConfigResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeQuerySuggestionsConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeThesaurusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeThesaurusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeThesaurusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DisassociateEntitiesFromExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateEntitiesFromExperienceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisassociateEntitiesFromExperienceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DisassociateEntitiesFromExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DisassociatePersonasFromEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociatePersonasFromEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DisassociatePersonasFromEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DisassociatePersonasFromEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetQuerySuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetQuerySuggestionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetQuerySuggestionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetQuerySuggestionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetSnapshotsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.kendra#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListAccessControlConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAccessControlConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListAccessControlConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListAccessControlConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDataSourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDataSourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDataSourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListDataSourceSyncJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDataSourceSyncJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListDataSourceSyncJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListDataSourceSyncJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListEntityPersonasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEntityPersonasCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEntityPersonasResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListEntityPersonasCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListExperienceEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListExperienceEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListExperienceEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListExperienceEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListExperiencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListExperiencesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListExperiencesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListExperiencesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListFaqsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListFaqsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListFaqsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListFaqsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListGroupsOlderThanOrderingIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListGroupsOlderThanOrderingIdCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListGroupsOlderThanOrderingIdResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListGroupsOlderThanOrderingIdCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListIndicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListIndicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListIndicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListIndicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListQuerySuggestionsBlockListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListQuerySuggestionsBlockListsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListQuerySuggestionsBlockListsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListQuerySuggestionsBlockListsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.kendra#ResourceUnavailableException":
            throw await deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListThesauriCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListThesauriCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListThesauriResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListThesauriCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutPrincipalMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutPrincipalMappingCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutPrincipalMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1QueryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1QueryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1QueryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1QueryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartDataSourceSyncJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartDataSourceSyncJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartDataSourceSyncJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.kendra#ResourceInUseException":
            throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopDataSourceSyncJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopDataSourceSyncJobCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopDataSourceSyncJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1SubmitFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1SubmitFeedbackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SubmitFeedbackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.kendra#ResourceUnavailableException":
            throw await deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.kendra#ResourceUnavailableException":
            throw await deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceUnavailableException":
        case "com.amazonaws.kendra#ResourceUnavailableException":
            throw await deserializeAws_json1_1ResourceUnavailableExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateAccessControlConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAccessControlConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateAccessControlConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateAccessControlConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDataSourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateDataSourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateExperienceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateExperienceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateExperienceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateIndexCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateIndexCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateIndexCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.kendra#ServiceQuotaExceededException":
            throw await deserializeAws_json1_1ServiceQuotaExceededExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateQuerySuggestionsBlockListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateQuerySuggestionsBlockListCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateQuerySuggestionsBlockListCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateQuerySuggestionsConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateQuerySuggestionsConfigCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateQuerySuggestionsConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateThesaurusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateThesaurusCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateThesaurusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.kendra#AccessDeniedException":
            throw await deserializeAws_json1_1AccessDeniedExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kendra#ConflictException":
            throw await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.kendra#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kendra#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.kendra#ThrottlingException":
            throw await deserializeAws_json1_1ThrottlingExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.kendra#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1AccessDeniedException(body, context);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ConflictExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConflictException(body, context);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerException(body, context);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceAlreadyExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceAlreadyExistException(body, context);
    const exception = new ResourceAlreadyExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceUnavailableExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceUnavailableException(body, context);
    const exception = new ResourceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ServiceQuotaExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServiceQuotaExceededException(body, context);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ThrottlingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ThrottlingException(body, context);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1AccessControlListConfiguration = (input, context) => {
    return {
        ...(input.KeyPath != null && { KeyPath: input.KeyPath }),
    };
};
const serializeAws_json1_1AclConfiguration = (input, context) => {
    return {
        ...(input.AllowedGroupsColumnName != null && { AllowedGroupsColumnName: input.AllowedGroupsColumnName }),
    };
};
const serializeAws_json1_1AlfrescoConfiguration = (input, context) => {
    return {
        ...(input.BlogFieldMappings != null && {
            BlogFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.BlogFieldMappings, context),
        }),
        ...(input.CrawlComments != null && { CrawlComments: input.CrawlComments }),
        ...(input.CrawlSystemFolders != null && { CrawlSystemFolders: input.CrawlSystemFolders }),
        ...(input.DocumentLibraryFieldMappings != null && {
            DocumentLibraryFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.DocumentLibraryFieldMappings, context),
        }),
        ...(input.EntityFilter != null && { EntityFilter: serializeAws_json1_1EntityFilter(input.EntityFilter, context) }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.SiteId != null && { SiteId: input.SiteId }),
        ...(input.SiteUrl != null && { SiteUrl: input.SiteUrl }),
        ...(input.SslCertificateS3Path != null && {
            SslCertificateS3Path: serializeAws_json1_1S3Path(input.SslCertificateS3Path, context),
        }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
        ...(input.WikiFieldMappings != null && {
            WikiFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.WikiFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1AssociateEntitiesToExperienceRequest = (input, context) => {
    return {
        ...(input.EntityList != null && { EntityList: serializeAws_json1_1AssociateEntityList(input.EntityList, context) }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1AssociateEntityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1EntityConfiguration(entry, context);
    });
};
const serializeAws_json1_1AssociatePersonasToEntitiesRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Personas != null && {
            Personas: serializeAws_json1_1EntityPersonaConfigurationList(input.Personas, context),
        }),
    };
};
const serializeAws_json1_1AttributeFilter = (input, context) => {
    return {
        ...(input.AndAllFilters != null && {
            AndAllFilters: serializeAws_json1_1AttributeFilterList(input.AndAllFilters, context),
        }),
        ...(input.ContainsAll != null && {
            ContainsAll: serializeAws_json1_1DocumentAttribute(input.ContainsAll, context),
        }),
        ...(input.ContainsAny != null && {
            ContainsAny: serializeAws_json1_1DocumentAttribute(input.ContainsAny, context),
        }),
        ...(input.EqualsTo != null && { EqualsTo: serializeAws_json1_1DocumentAttribute(input.EqualsTo, context) }),
        ...(input.GreaterThan != null && {
            GreaterThan: serializeAws_json1_1DocumentAttribute(input.GreaterThan, context),
        }),
        ...(input.GreaterThanOrEquals != null && {
            GreaterThanOrEquals: serializeAws_json1_1DocumentAttribute(input.GreaterThanOrEquals, context),
        }),
        ...(input.LessThan != null && { LessThan: serializeAws_json1_1DocumentAttribute(input.LessThan, context) }),
        ...(input.LessThanOrEquals != null && {
            LessThanOrEquals: serializeAws_json1_1DocumentAttribute(input.LessThanOrEquals, context),
        }),
        ...(input.NotFilter != null && { NotFilter: serializeAws_json1_1AttributeFilter(input.NotFilter, context) }),
        ...(input.OrAllFilters != null && {
            OrAllFilters: serializeAws_json1_1AttributeFilterList(input.OrAllFilters, context),
        }),
    };
};
const serializeAws_json1_1AttributeFilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1AttributeFilter(entry, context);
    });
};
const serializeAws_json1_1AuthenticationConfiguration = (input, context) => {
    return {
        ...(input.BasicAuthentication != null && {
            BasicAuthentication: serializeAws_json1_1BasicAuthenticationConfigurationList(input.BasicAuthentication, context),
        }),
    };
};
const serializeAws_json1_1BasicAuthenticationConfiguration = (input, context) => {
    return {
        ...(input.Credentials != null && { Credentials: input.Credentials }),
        ...(input.Host != null && { Host: input.Host }),
        ...(input.Port != null && { Port: input.Port }),
    };
};
const serializeAws_json1_1BasicAuthenticationConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1BasicAuthenticationConfiguration(entry, context);
    });
};
const serializeAws_json1_1BatchDeleteDocumentRequest = (input, context) => {
    return {
        ...(input.DataSourceSyncJobMetricTarget != null && {
            DataSourceSyncJobMetricTarget: serializeAws_json1_1DataSourceSyncJobMetricTarget(input.DataSourceSyncJobMetricTarget, context),
        }),
        ...(input.DocumentIdList != null && {
            DocumentIdList: serializeAws_json1_1DocumentIdList(input.DocumentIdList, context),
        }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1BatchGetDocumentStatusRequest = (input, context) => {
    return {
        ...(input.DocumentInfoList != null && {
            DocumentInfoList: serializeAws_json1_1DocumentInfoList(input.DocumentInfoList, context),
        }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1BatchPutDocumentRequest = (input, context) => {
    return {
        ...(input.CustomDocumentEnrichmentConfiguration != null && {
            CustomDocumentEnrichmentConfiguration: serializeAws_json1_1CustomDocumentEnrichmentConfiguration(input.CustomDocumentEnrichmentConfiguration, context),
        }),
        ...(input.Documents != null && { Documents: serializeAws_json1_1DocumentList(input.Documents, context) }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1BoxConfiguration = (input, context) => {
    return {
        ...(input.CommentFieldMappings != null && {
            CommentFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.CommentFieldMappings, context),
        }),
        ...(input.CrawlComments != null && { CrawlComments: input.CrawlComments }),
        ...(input.CrawlTasks != null && { CrawlTasks: input.CrawlTasks }),
        ...(input.CrawlWebLinks != null && { CrawlWebLinks: input.CrawlWebLinks }),
        ...(input.EnterpriseId != null && { EnterpriseId: input.EnterpriseId }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FileFieldMappings != null && {
            FileFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FileFieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.TaskFieldMappings != null && {
            TaskFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.TaskFieldMappings, context),
        }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
        ...(input.WebLinkFieldMappings != null && {
            WebLinkFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.WebLinkFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1CapacityUnitsConfiguration = (input, context) => {
    return {
        ...(input.QueryCapacityUnits != null && { QueryCapacityUnits: input.QueryCapacityUnits }),
        ...(input.StorageCapacityUnits != null && { StorageCapacityUnits: input.StorageCapacityUnits }),
    };
};
const serializeAws_json1_1ChangeDetectingColumns = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ClearQuerySuggestionsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1ClickFeedback = (input, context) => {
    return {
        ...(input.ClickTime != null && { ClickTime: Math.round(input.ClickTime.getTime() / 1000) }),
        ...(input.ResultId != null && { ResultId: input.ResultId }),
    };
};
const serializeAws_json1_1ClickFeedbackList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ClickFeedback(entry, context);
    });
};
const serializeAws_json1_1ColumnConfiguration = (input, context) => {
    return {
        ...(input.ChangeDetectingColumns != null && {
            ChangeDetectingColumns: serializeAws_json1_1ChangeDetectingColumns(input.ChangeDetectingColumns, context),
        }),
        ...(input.DocumentDataColumnName != null && { DocumentDataColumnName: input.DocumentDataColumnName }),
        ...(input.DocumentIdColumnName != null && { DocumentIdColumnName: input.DocumentIdColumnName }),
        ...(input.DocumentTitleColumnName != null && { DocumentTitleColumnName: input.DocumentTitleColumnName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
    };
};
const serializeAws_json1_1ConfluenceAttachmentConfiguration = (input, context) => {
    return {
        ...(input.AttachmentFieldMappings != null && {
            AttachmentFieldMappings: serializeAws_json1_1ConfluenceAttachmentFieldMappingsList(input.AttachmentFieldMappings, context),
        }),
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
    };
};
const serializeAws_json1_1ConfluenceAttachmentFieldMappingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConfluenceAttachmentToIndexFieldMapping(entry, context);
    });
};
const serializeAws_json1_1ConfluenceAttachmentToIndexFieldMapping = (input, context) => {
    return {
        ...(input.DataSourceFieldName != null && { DataSourceFieldName: input.DataSourceFieldName }),
        ...(input.DateFieldFormat != null && { DateFieldFormat: input.DateFieldFormat }),
        ...(input.IndexFieldName != null && { IndexFieldName: input.IndexFieldName }),
    };
};
const serializeAws_json1_1ConfluenceBlogConfiguration = (input, context) => {
    return {
        ...(input.BlogFieldMappings != null && {
            BlogFieldMappings: serializeAws_json1_1ConfluenceBlogFieldMappingsList(input.BlogFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1ConfluenceBlogFieldMappingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConfluenceBlogToIndexFieldMapping(entry, context);
    });
};
const serializeAws_json1_1ConfluenceBlogToIndexFieldMapping = (input, context) => {
    return {
        ...(input.DataSourceFieldName != null && { DataSourceFieldName: input.DataSourceFieldName }),
        ...(input.DateFieldFormat != null && { DateFieldFormat: input.DateFieldFormat }),
        ...(input.IndexFieldName != null && { IndexFieldName: input.IndexFieldName }),
    };
};
const serializeAws_json1_1ConfluenceConfiguration = (input, context) => {
    return {
        ...(input.AttachmentConfiguration != null && {
            AttachmentConfiguration: serializeAws_json1_1ConfluenceAttachmentConfiguration(input.AttachmentConfiguration, context),
        }),
        ...(input.AuthenticationType != null && { AuthenticationType: input.AuthenticationType }),
        ...(input.BlogConfiguration != null && {
            BlogConfiguration: serializeAws_json1_1ConfluenceBlogConfiguration(input.BlogConfiguration, context),
        }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.PageConfiguration != null && {
            PageConfiguration: serializeAws_json1_1ConfluencePageConfiguration(input.PageConfiguration, context),
        }),
        ...(input.ProxyConfiguration != null && {
            ProxyConfiguration: serializeAws_json1_1ProxyConfiguration(input.ProxyConfiguration, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.ServerUrl != null && { ServerUrl: input.ServerUrl }),
        ...(input.SpaceConfiguration != null && {
            SpaceConfiguration: serializeAws_json1_1ConfluenceSpaceConfiguration(input.SpaceConfiguration, context),
        }),
        ...(input.Version != null && { Version: input.Version }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1ConfluencePageConfiguration = (input, context) => {
    return {
        ...(input.PageFieldMappings != null && {
            PageFieldMappings: serializeAws_json1_1ConfluencePageFieldMappingsList(input.PageFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1ConfluencePageFieldMappingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConfluencePageToIndexFieldMapping(entry, context);
    });
};
const serializeAws_json1_1ConfluencePageToIndexFieldMapping = (input, context) => {
    return {
        ...(input.DataSourceFieldName != null && { DataSourceFieldName: input.DataSourceFieldName }),
        ...(input.DateFieldFormat != null && { DateFieldFormat: input.DateFieldFormat }),
        ...(input.IndexFieldName != null && { IndexFieldName: input.IndexFieldName }),
    };
};
const serializeAws_json1_1ConfluenceSpaceConfiguration = (input, context) => {
    return {
        ...(input.CrawlArchivedSpaces != null && { CrawlArchivedSpaces: input.CrawlArchivedSpaces }),
        ...(input.CrawlPersonalSpaces != null && { CrawlPersonalSpaces: input.CrawlPersonalSpaces }),
        ...(input.ExcludeSpaces != null && {
            ExcludeSpaces: serializeAws_json1_1ConfluenceSpaceList(input.ExcludeSpaces, context),
        }),
        ...(input.IncludeSpaces != null && {
            IncludeSpaces: serializeAws_json1_1ConfluenceSpaceList(input.IncludeSpaces, context),
        }),
        ...(input.SpaceFieldMappings != null && {
            SpaceFieldMappings: serializeAws_json1_1ConfluenceSpaceFieldMappingsList(input.SpaceFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1ConfluenceSpaceFieldMappingsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ConfluenceSpaceToIndexFieldMapping(entry, context);
    });
};
const serializeAws_json1_1ConfluenceSpaceList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ConfluenceSpaceToIndexFieldMapping = (input, context) => {
    return {
        ...(input.DataSourceFieldName != null && { DataSourceFieldName: input.DataSourceFieldName }),
        ...(input.DateFieldFormat != null && { DateFieldFormat: input.DateFieldFormat }),
        ...(input.IndexFieldName != null && { IndexFieldName: input.IndexFieldName }),
    };
};
const serializeAws_json1_1ConnectionConfiguration = (input, context) => {
    return {
        ...(input.DatabaseHost != null && { DatabaseHost: input.DatabaseHost }),
        ...(input.DatabaseName != null && { DatabaseName: input.DatabaseName }),
        ...(input.DatabasePort != null && { DatabasePort: input.DatabasePort }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.TableName != null && { TableName: input.TableName }),
    };
};
const serializeAws_json1_1ContentSourceConfiguration = (input, context) => {
    return {
        ...(input.DataSourceIds != null && {
            DataSourceIds: serializeAws_json1_1DataSourceIdList(input.DataSourceIds, context),
        }),
        ...(input.DirectPutContent != null && { DirectPutContent: input.DirectPutContent }),
        ...(input.FaqIds != null && { FaqIds: serializeAws_json1_1FaqIdsList(input.FaqIds, context) }),
    };
};
const serializeAws_json1_1CreateAccessControlConfigurationRequest = (input, context) => {
    return {
        ...(input.AccessControlList != null && {
            AccessControlList: serializeAws_json1_1PrincipalList(input.AccessControlList, context),
        }),
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.HierarchicalAccessControlList != null && {
            HierarchicalAccessControlList: serializeAws_json1_1HierarchicalPrincipalList(input.HierarchicalAccessControlList, context),
        }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1CreateDataSourceRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Configuration != null && {
            Configuration: serializeAws_json1_1DataSourceConfiguration(input.Configuration, context),
        }),
        ...(input.CustomDocumentEnrichmentConfiguration != null && {
            CustomDocumentEnrichmentConfiguration: serializeAws_json1_1CustomDocumentEnrichmentConfiguration(input.CustomDocumentEnrichmentConfiguration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.Schedule != null && { Schedule: input.Schedule }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.Type != null && { Type: input.Type }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1CreateExperienceRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Configuration != null && {
            Configuration: serializeAws_json1_1ExperienceConfiguration(input.Configuration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1CreateFaqRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.FileFormat != null && { FileFormat: input.FileFormat }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.S3Path != null && { S3Path: serializeAws_json1_1S3Path(input.S3Path, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateIndexRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Edition != null && { Edition: input.Edition }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.ServerSideEncryptionConfiguration != null && {
            ServerSideEncryptionConfiguration: serializeAws_json1_1ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context),
        }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
        ...(input.UserContextPolicy != null && { UserContextPolicy: input.UserContextPolicy }),
        ...(input.UserGroupResolutionConfiguration != null && {
            UserGroupResolutionConfiguration: serializeAws_json1_1UserGroupResolutionConfiguration(input.UserGroupResolutionConfiguration, context),
        }),
        ...(input.UserTokenConfigurations != null && {
            UserTokenConfigurations: serializeAws_json1_1UserTokenConfigurationList(input.UserTokenConfigurations, context),
        }),
    };
};
const serializeAws_json1_1CreateQuerySuggestionsBlockListRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.SourceS3Path != null && { SourceS3Path: serializeAws_json1_1S3Path(input.SourceS3Path, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CreateThesaurusRequest = (input, context) => {
    return {
        ClientToken: input.ClientToken ?? generateIdempotencyToken(),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.SourceS3Path != null && { SourceS3Path: serializeAws_json1_1S3Path(input.SourceS3Path, context) }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1CustomDocumentEnrichmentConfiguration = (input, context) => {
    return {
        ...(input.InlineConfigurations != null && {
            InlineConfigurations: serializeAws_json1_1InlineCustomDocumentEnrichmentConfigurationList(input.InlineConfigurations, context),
        }),
        ...(input.PostExtractionHookConfiguration != null && {
            PostExtractionHookConfiguration: serializeAws_json1_1HookConfiguration(input.PostExtractionHookConfiguration, context),
        }),
        ...(input.PreExtractionHookConfiguration != null && {
            PreExtractionHookConfiguration: serializeAws_json1_1HookConfiguration(input.PreExtractionHookConfiguration, context),
        }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1DatabaseConfiguration = (input, context) => {
    return {
        ...(input.AclConfiguration != null && {
            AclConfiguration: serializeAws_json1_1AclConfiguration(input.AclConfiguration, context),
        }),
        ...(input.ColumnConfiguration != null && {
            ColumnConfiguration: serializeAws_json1_1ColumnConfiguration(input.ColumnConfiguration, context),
        }),
        ...(input.ConnectionConfiguration != null && {
            ConnectionConfiguration: serializeAws_json1_1ConnectionConfiguration(input.ConnectionConfiguration, context),
        }),
        ...(input.DatabaseEngineType != null && { DatabaseEngineType: input.DatabaseEngineType }),
        ...(input.SqlConfiguration != null && {
            SqlConfiguration: serializeAws_json1_1SqlConfiguration(input.SqlConfiguration, context),
        }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1DataSourceConfiguration = (input, context) => {
    return {
        ...(input.AlfrescoConfiguration != null && {
            AlfrescoConfiguration: serializeAws_json1_1AlfrescoConfiguration(input.AlfrescoConfiguration, context),
        }),
        ...(input.BoxConfiguration != null && {
            BoxConfiguration: serializeAws_json1_1BoxConfiguration(input.BoxConfiguration, context),
        }),
        ...(input.ConfluenceConfiguration != null && {
            ConfluenceConfiguration: serializeAws_json1_1ConfluenceConfiguration(input.ConfluenceConfiguration, context),
        }),
        ...(input.DatabaseConfiguration != null && {
            DatabaseConfiguration: serializeAws_json1_1DatabaseConfiguration(input.DatabaseConfiguration, context),
        }),
        ...(input.FsxConfiguration != null && {
            FsxConfiguration: serializeAws_json1_1FsxConfiguration(input.FsxConfiguration, context),
        }),
        ...(input.GitHubConfiguration != null && {
            GitHubConfiguration: serializeAws_json1_1GitHubConfiguration(input.GitHubConfiguration, context),
        }),
        ...(input.GoogleDriveConfiguration != null && {
            GoogleDriveConfiguration: serializeAws_json1_1GoogleDriveConfiguration(input.GoogleDriveConfiguration, context),
        }),
        ...(input.JiraConfiguration != null && {
            JiraConfiguration: serializeAws_json1_1JiraConfiguration(input.JiraConfiguration, context),
        }),
        ...(input.OneDriveConfiguration != null && {
            OneDriveConfiguration: serializeAws_json1_1OneDriveConfiguration(input.OneDriveConfiguration, context),
        }),
        ...(input.QuipConfiguration != null && {
            QuipConfiguration: serializeAws_json1_1QuipConfiguration(input.QuipConfiguration, context),
        }),
        ...(input.S3Configuration != null && {
            S3Configuration: serializeAws_json1_1S3DataSourceConfiguration(input.S3Configuration, context),
        }),
        ...(input.SalesforceConfiguration != null && {
            SalesforceConfiguration: serializeAws_json1_1SalesforceConfiguration(input.SalesforceConfiguration, context),
        }),
        ...(input.ServiceNowConfiguration != null && {
            ServiceNowConfiguration: serializeAws_json1_1ServiceNowConfiguration(input.ServiceNowConfiguration, context),
        }),
        ...(input.SharePointConfiguration != null && {
            SharePointConfiguration: serializeAws_json1_1SharePointConfiguration(input.SharePointConfiguration, context),
        }),
        ...(input.SlackConfiguration != null && {
            SlackConfiguration: serializeAws_json1_1SlackConfiguration(input.SlackConfiguration, context),
        }),
        ...(input.TemplateConfiguration != null && {
            TemplateConfiguration: serializeAws_json1_1TemplateConfiguration(input.TemplateConfiguration, context),
        }),
        ...(input.WebCrawlerConfiguration != null && {
            WebCrawlerConfiguration: serializeAws_json1_1WebCrawlerConfiguration(input.WebCrawlerConfiguration, context),
        }),
        ...(input.WorkDocsConfiguration != null && {
            WorkDocsConfiguration: serializeAws_json1_1WorkDocsConfiguration(input.WorkDocsConfiguration, context),
        }),
    };
};
const serializeAws_json1_1DataSourceGroup = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.GroupId != null && { GroupId: input.GroupId }),
    };
};
const serializeAws_json1_1DataSourceGroups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DataSourceGroup(entry, context);
    });
};
const serializeAws_json1_1DataSourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DataSourceInclusionsExclusionsStrings = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DataSourceSyncJobMetricTarget = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.DataSourceSyncJobId != null && { DataSourceSyncJobId: input.DataSourceSyncJobId }),
    };
};
const serializeAws_json1_1DataSourceToIndexFieldMapping = (input, context) => {
    return {
        ...(input.DataSourceFieldName != null && { DataSourceFieldName: input.DataSourceFieldName }),
        ...(input.DateFieldFormat != null && { DateFieldFormat: input.DateFieldFormat }),
        ...(input.IndexFieldName != null && { IndexFieldName: input.IndexFieldName }),
    };
};
const serializeAws_json1_1DataSourceToIndexFieldMappingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DataSourceToIndexFieldMapping(entry, context);
    });
};
const serializeAws_json1_1DataSourceVpcConfiguration = (input, context) => {
    return {
        ...(input.SecurityGroupIds != null && {
            SecurityGroupIds: serializeAws_json1_1SecurityGroupIdList(input.SecurityGroupIds, context),
        }),
        ...(input.SubnetIds != null && { SubnetIds: serializeAws_json1_1SubnetIdList(input.SubnetIds, context) }),
    };
};
const serializeAws_json1_1DeleteAccessControlConfigurationRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DeleteDataSourceRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DeleteExperienceRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DeleteFaqRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DeleteIndexRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
    };
};
const serializeAws_json1_1DeletePrincipalMappingRequest = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.GroupId != null && { GroupId: input.GroupId }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.OrderingId != null && { OrderingId: input.OrderingId }),
    };
};
const serializeAws_json1_1DeleteQuerySuggestionsBlockListRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DeleteThesaurusRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeAccessControlConfigurationRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeDataSourceRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeExperienceRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeFaqRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeIndexRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
    };
};
const serializeAws_json1_1DescribePrincipalMappingRequest = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.GroupId != null && { GroupId: input.GroupId }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeQuerySuggestionsBlockListRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeQuerySuggestionsConfigRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DescribeThesaurusRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DisassociateEntitiesFromExperienceRequest = (input, context) => {
    return {
        ...(input.EntityList != null && {
            EntityList: serializeAws_json1_1DisassociateEntityList(input.EntityList, context),
        }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1DisassociateEntityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1EntityConfiguration(entry, context);
    });
};
const serializeAws_json1_1DisassociatePersonasFromEntitiesRequest = (input, context) => {
    return {
        ...(input.EntityIds != null && { EntityIds: serializeAws_json1_1EntityIdsList(input.EntityIds, context) }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1Document = (input, context) => {
    return {
        ...(input.AccessControlConfigurationId != null && {
            AccessControlConfigurationId: input.AccessControlConfigurationId,
        }),
        ...(input.AccessControlList != null && {
            AccessControlList: serializeAws_json1_1PrincipalList(input.AccessControlList, context),
        }),
        ...(input.Attributes != null && {
            Attributes: serializeAws_json1_1DocumentAttributeList(input.Attributes, context),
        }),
        ...(input.Blob != null && { Blob: context.base64Encoder(input.Blob) }),
        ...(input.ContentType != null && { ContentType: input.ContentType }),
        ...(input.HierarchicalAccessControlList != null && {
            HierarchicalAccessControlList: serializeAws_json1_1HierarchicalPrincipalList(input.HierarchicalAccessControlList, context),
        }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.S3Path != null && { S3Path: serializeAws_json1_1S3Path(input.S3Path, context) }),
        ...(input.Title != null && { Title: input.Title }),
    };
};
const serializeAws_json1_1DocumentAttribute = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: serializeAws_json1_1DocumentAttributeValue(input.Value, context) }),
    };
};
const serializeAws_json1_1DocumentAttributeCondition = (input, context) => {
    return {
        ...(input.ConditionDocumentAttributeKey != null && {
            ConditionDocumentAttributeKey: input.ConditionDocumentAttributeKey,
        }),
        ...(input.ConditionOnValue != null && {
            ConditionOnValue: serializeAws_json1_1DocumentAttributeValue(input.ConditionOnValue, context),
        }),
        ...(input.Operator != null && { Operator: input.Operator }),
    };
};
const serializeAws_json1_1DocumentAttributeKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DocumentAttributeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DocumentAttribute(entry, context);
    });
};
const serializeAws_json1_1DocumentAttributeStringListValue = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DocumentAttributeTarget = (input, context) => {
    return {
        ...(input.TargetDocumentAttributeKey != null && { TargetDocumentAttributeKey: input.TargetDocumentAttributeKey }),
        ...(input.TargetDocumentAttributeValue != null && {
            TargetDocumentAttributeValue: serializeAws_json1_1DocumentAttributeValue(input.TargetDocumentAttributeValue, context),
        }),
        ...(input.TargetDocumentAttributeValueDeletion != null && {
            TargetDocumentAttributeValueDeletion: input.TargetDocumentAttributeValueDeletion,
        }),
    };
};
const serializeAws_json1_1DocumentAttributeValue = (input, context) => {
    return {
        ...(input.DateValue != null && { DateValue: Math.round(input.DateValue.getTime() / 1000) }),
        ...(input.LongValue != null && { LongValue: input.LongValue }),
        ...(input.StringListValue != null && {
            StringListValue: serializeAws_json1_1DocumentAttributeStringListValue(input.StringListValue, context),
        }),
        ...(input.StringValue != null && { StringValue: input.StringValue }),
    };
};
const serializeAws_json1_1DocumentIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1DocumentInfo = (input, context) => {
    return {
        ...(input.Attributes != null && {
            Attributes: serializeAws_json1_1DocumentAttributeList(input.Attributes, context),
        }),
        ...(input.DocumentId != null && { DocumentId: input.DocumentId }),
    };
};
const serializeAws_json1_1DocumentInfoList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DocumentInfo(entry, context);
    });
};
const serializeAws_json1_1DocumentList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Document(entry, context);
    });
};
const serializeAws_json1_1DocumentMetadataConfiguration = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Relevance != null && { Relevance: serializeAws_json1_1Relevance(input.Relevance, context) }),
        ...(input.Search != null && { Search: serializeAws_json1_1Search(input.Search, context) }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1DocumentMetadataConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DocumentMetadataConfiguration(entry, context);
    });
};
const serializeAws_json1_1DocumentRelevanceConfiguration = (input, context) => {
    return {
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Relevance != null && { Relevance: serializeAws_json1_1Relevance(input.Relevance, context) }),
    };
};
const serializeAws_json1_1DocumentRelevanceOverrideConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1DocumentRelevanceConfiguration(entry, context);
    });
};
const serializeAws_json1_1DocumentsMetadataConfiguration = (input, context) => {
    return {
        ...(input.S3Prefix != null && { S3Prefix: input.S3Prefix }),
    };
};
const serializeAws_json1_1EntityConfiguration = (input, context) => {
    return {
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.EntityType != null && { EntityType: input.EntityType }),
    };
};
const serializeAws_json1_1EntityFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1EntityIdsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1EntityPersonaConfiguration = (input, context) => {
    return {
        ...(input.EntityId != null && { EntityId: input.EntityId }),
        ...(input.Persona != null && { Persona: input.Persona }),
    };
};
const serializeAws_json1_1EntityPersonaConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1EntityPersonaConfiguration(entry, context);
    });
};
const serializeAws_json1_1ExcludeMimeTypesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ExcludeSharedDrivesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ExcludeUserAccountsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ExperienceConfiguration = (input, context) => {
    return {
        ...(input.ContentSourceConfiguration != null && {
            ContentSourceConfiguration: serializeAws_json1_1ContentSourceConfiguration(input.ContentSourceConfiguration, context),
        }),
        ...(input.UserIdentityConfiguration != null && {
            UserIdentityConfiguration: serializeAws_json1_1UserIdentityConfiguration(input.UserIdentityConfiguration, context),
        }),
    };
};
const serializeAws_json1_1Facet = (input, context) => {
    return {
        ...(input.DocumentAttributeKey != null && { DocumentAttributeKey: input.DocumentAttributeKey }),
        ...(input.Facets != null && { Facets: serializeAws_json1_1FacetList(input.Facets, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    };
};
const serializeAws_json1_1FacetList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Facet(entry, context);
    });
};
const serializeAws_json1_1FaqIdsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1FolderIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1FsxConfiguration = (input, context) => {
    return {
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.FileSystemId != null && { FileSystemId: input.FileSystemId }),
        ...(input.FileSystemType != null && { FileSystemType: input.FileSystemType }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1GetQuerySuggestionsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxSuggestionsCount != null && { MaxSuggestionsCount: input.MaxSuggestionsCount }),
        ...(input.QueryText != null && { QueryText: input.QueryText }),
    };
};
const serializeAws_json1_1GetSnapshotsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Interval != null && { Interval: input.Interval }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.MetricType != null && { MetricType: input.MetricType }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1GitHubConfiguration = (input, context) => {
    return {
        ...(input.ExclusionFileNamePatterns != null && {
            ExclusionFileNamePatterns: serializeAws_json1_1StringList(input.ExclusionFileNamePatterns, context),
        }),
        ...(input.ExclusionFileTypePatterns != null && {
            ExclusionFileTypePatterns: serializeAws_json1_1StringList(input.ExclusionFileTypePatterns, context),
        }),
        ...(input.ExclusionFolderNamePatterns != null && {
            ExclusionFolderNamePatterns: serializeAws_json1_1StringList(input.ExclusionFolderNamePatterns, context),
        }),
        ...(input.GitHubCommitConfigurationFieldMappings != null && {
            GitHubCommitConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubCommitConfigurationFieldMappings, context),
        }),
        ...(input.GitHubDocumentCrawlProperties != null && {
            GitHubDocumentCrawlProperties: serializeAws_json1_1GitHubDocumentCrawlProperties(input.GitHubDocumentCrawlProperties, context),
        }),
        ...(input.GitHubIssueAttachmentConfigurationFieldMappings != null && {
            GitHubIssueAttachmentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubIssueAttachmentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubIssueCommentConfigurationFieldMappings != null && {
            GitHubIssueCommentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubIssueCommentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubIssueDocumentConfigurationFieldMappings != null && {
            GitHubIssueDocumentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubIssueDocumentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubPullRequestCommentConfigurationFieldMappings != null && {
            GitHubPullRequestCommentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubPullRequestCommentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubPullRequestDocumentAttachmentConfigurationFieldMappings != null && {
            GitHubPullRequestDocumentAttachmentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubPullRequestDocumentAttachmentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubPullRequestDocumentConfigurationFieldMappings != null && {
            GitHubPullRequestDocumentConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubPullRequestDocumentConfigurationFieldMappings, context),
        }),
        ...(input.GitHubRepositoryConfigurationFieldMappings != null && {
            GitHubRepositoryConfigurationFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.GitHubRepositoryConfigurationFieldMappings, context),
        }),
        ...(input.InclusionFileNamePatterns != null && {
            InclusionFileNamePatterns: serializeAws_json1_1StringList(input.InclusionFileNamePatterns, context),
        }),
        ...(input.InclusionFileTypePatterns != null && {
            InclusionFileTypePatterns: serializeAws_json1_1StringList(input.InclusionFileTypePatterns, context),
        }),
        ...(input.InclusionFolderNamePatterns != null && {
            InclusionFolderNamePatterns: serializeAws_json1_1StringList(input.InclusionFolderNamePatterns, context),
        }),
        ...(input.OnPremiseConfiguration != null && {
            OnPremiseConfiguration: serializeAws_json1_1OnPremiseConfiguration(input.OnPremiseConfiguration, context),
        }),
        ...(input.RepositoryFilter != null && {
            RepositoryFilter: serializeAws_json1_1RepositoryNames(input.RepositoryFilter, context),
        }),
        ...(input.SaaSConfiguration != null && {
            SaaSConfiguration: serializeAws_json1_1SaaSConfiguration(input.SaaSConfiguration, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.Type != null && { Type: input.Type }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1GitHubDocumentCrawlProperties = (input, context) => {
    return {
        ...(input.CrawlIssue != null && { CrawlIssue: input.CrawlIssue }),
        ...(input.CrawlIssueComment != null && { CrawlIssueComment: input.CrawlIssueComment }),
        ...(input.CrawlIssueCommentAttachment != null && {
            CrawlIssueCommentAttachment: input.CrawlIssueCommentAttachment,
        }),
        ...(input.CrawlPullRequest != null && { CrawlPullRequest: input.CrawlPullRequest }),
        ...(input.CrawlPullRequestComment != null && { CrawlPullRequestComment: input.CrawlPullRequestComment }),
        ...(input.CrawlPullRequestCommentAttachment != null && {
            CrawlPullRequestCommentAttachment: input.CrawlPullRequestCommentAttachment,
        }),
        ...(input.CrawlRepositoryDocuments != null && { CrawlRepositoryDocuments: input.CrawlRepositoryDocuments }),
    };
};
const serializeAws_json1_1GoogleDriveConfiguration = (input, context) => {
    return {
        ...(input.ExcludeMimeTypes != null && {
            ExcludeMimeTypes: serializeAws_json1_1ExcludeMimeTypesList(input.ExcludeMimeTypes, context),
        }),
        ...(input.ExcludeSharedDrives != null && {
            ExcludeSharedDrives: serializeAws_json1_1ExcludeSharedDrivesList(input.ExcludeSharedDrives, context),
        }),
        ...(input.ExcludeUserAccounts != null && {
            ExcludeUserAccounts: serializeAws_json1_1ExcludeUserAccountsList(input.ExcludeUserAccounts, context),
        }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
    };
};
const serializeAws_json1_1GroupMembers = (input, context) => {
    return {
        ...(input.MemberGroups != null && { MemberGroups: serializeAws_json1_1MemberGroups(input.MemberGroups, context) }),
        ...(input.MemberUsers != null && { MemberUsers: serializeAws_json1_1MemberUsers(input.MemberUsers, context) }),
        ...(input.S3PathforGroupMembers != null && {
            S3PathforGroupMembers: serializeAws_json1_1S3Path(input.S3PathforGroupMembers, context),
        }),
    };
};
const serializeAws_json1_1Groups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1HierarchicalPrincipal = (input, context) => {
    return {
        ...(input.PrincipalList != null && {
            PrincipalList: serializeAws_json1_1PrincipalList(input.PrincipalList, context),
        }),
    };
};
const serializeAws_json1_1HierarchicalPrincipalList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1HierarchicalPrincipal(entry, context);
    });
};
const serializeAws_json1_1HookConfiguration = (input, context) => {
    return {
        ...(input.InvocationCondition != null && {
            InvocationCondition: serializeAws_json1_1DocumentAttributeCondition(input.InvocationCondition, context),
        }),
        ...(input.LambdaArn != null && { LambdaArn: input.LambdaArn }),
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
    };
};
const serializeAws_json1_1InlineCustomDocumentEnrichmentConfiguration = (input, context) => {
    return {
        ...(input.Condition != null && {
            Condition: serializeAws_json1_1DocumentAttributeCondition(input.Condition, context),
        }),
        ...(input.DocumentContentDeletion != null && { DocumentContentDeletion: input.DocumentContentDeletion }),
        ...(input.Target != null && { Target: serializeAws_json1_1DocumentAttributeTarget(input.Target, context) }),
    };
};
const serializeAws_json1_1InlineCustomDocumentEnrichmentConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1InlineCustomDocumentEnrichmentConfiguration(entry, context);
    });
};
const serializeAws_json1_1IssueSubEntityFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1IssueType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1JiraConfiguration = (input, context) => {
    return {
        ...(input.AttachmentFieldMappings != null && {
            AttachmentFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.AttachmentFieldMappings, context),
        }),
        ...(input.CommentFieldMappings != null && {
            CommentFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.CommentFieldMappings, context),
        }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.IssueFieldMappings != null && {
            IssueFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.IssueFieldMappings, context),
        }),
        ...(input.IssueSubEntityFilter != null && {
            IssueSubEntityFilter: serializeAws_json1_1IssueSubEntityFilter(input.IssueSubEntityFilter, context),
        }),
        ...(input.IssueType != null && { IssueType: serializeAws_json1_1IssueType(input.IssueType, context) }),
        ...(input.JiraAccountUrl != null && { JiraAccountUrl: input.JiraAccountUrl }),
        ...(input.Project != null && { Project: serializeAws_json1_1Project(input.Project, context) }),
        ...(input.ProjectFieldMappings != null && {
            ProjectFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.ProjectFieldMappings, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.Status != null && { Status: serializeAws_json1_1JiraStatus(input.Status, context) }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
        ...(input.WorkLogFieldMappings != null && {
            WorkLogFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.WorkLogFieldMappings, context),
        }),
    };
};
const serializeAws_json1_1JiraStatus = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1JsonTokenTypeConfiguration = (input, context) => {
    return {
        ...(input.GroupAttributeField != null && { GroupAttributeField: input.GroupAttributeField }),
        ...(input.UserNameAttributeField != null && { UserNameAttributeField: input.UserNameAttributeField }),
    };
};
const serializeAws_json1_1JwtTokenTypeConfiguration = (input, context) => {
    return {
        ...(input.ClaimRegex != null && { ClaimRegex: input.ClaimRegex }),
        ...(input.GroupAttributeField != null && { GroupAttributeField: input.GroupAttributeField }),
        ...(input.Issuer != null && { Issuer: input.Issuer }),
        ...(input.KeyLocation != null && { KeyLocation: input.KeyLocation }),
        ...(input.SecretManagerArn != null && { SecretManagerArn: input.SecretManagerArn }),
        ...(input.URL != null && { URL: input.URL }),
        ...(input.UserNameAttributeField != null && { UserNameAttributeField: input.UserNameAttributeField }),
    };
};
const serializeAws_json1_1ListAccessControlConfigurationsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDataSourcesRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListDataSourceSyncJobsRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.StartTimeFilter != null && {
            StartTimeFilter: serializeAws_json1_1TimeRange(input.StartTimeFilter, context),
        }),
        ...(input.StatusFilter != null && { StatusFilter: input.StatusFilter }),
    };
};
const serializeAws_json1_1ListEntityPersonasRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListExperienceEntitiesRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListExperiencesRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListFaqsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListGroupsOlderThanOrderingIdRequest = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
        ...(input.OrderingId != null && { OrderingId: input.OrderingId }),
    };
};
const serializeAws_json1_1ListIndicesRequest = (input, context) => {
    return {
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListQuerySuggestionsBlockListsRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
    };
};
const serializeAws_json1_1ListThesauriRequest = (input, context) => {
    return {
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1MemberGroup = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.GroupId != null && { GroupId: input.GroupId }),
    };
};
const serializeAws_json1_1MemberGroups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1MemberGroup(entry, context);
    });
};
const serializeAws_json1_1MemberUser = (input, context) => {
    return {
        ...(input.UserId != null && { UserId: input.UserId }),
    };
};
const serializeAws_json1_1MemberUsers = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1MemberUser(entry, context);
    });
};
const serializeAws_json1_1OneDriveConfiguration = (input, context) => {
    return {
        ...(input.DisableLocalGroups != null && { DisableLocalGroups: input.DisableLocalGroups }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.OneDriveUsers != null && {
            OneDriveUsers: serializeAws_json1_1OneDriveUsers(input.OneDriveUsers, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.TenantDomain != null && { TenantDomain: input.TenantDomain }),
    };
};
const serializeAws_json1_1OneDriveUserList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1OneDriveUsers = (input, context) => {
    return {
        ...(input.OneDriveUserList != null && {
            OneDriveUserList: serializeAws_json1_1OneDriveUserList(input.OneDriveUserList, context),
        }),
        ...(input.OneDriveUserS3Path != null && {
            OneDriveUserS3Path: serializeAws_json1_1S3Path(input.OneDriveUserS3Path, context),
        }),
    };
};
const serializeAws_json1_1OnPremiseConfiguration = (input, context) => {
    return {
        ...(input.HostUrl != null && { HostUrl: input.HostUrl }),
        ...(input.OrganizationName != null && { OrganizationName: input.OrganizationName }),
        ...(input.SslCertificateS3Path != null && {
            SslCertificateS3Path: serializeAws_json1_1S3Path(input.SslCertificateS3Path, context),
        }),
    };
};
const serializeAws_json1_1Principal = (input, context) => {
    return {
        ...(input.Access != null && { Access: input.Access }),
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.Type != null && { Type: input.Type }),
    };
};
const serializeAws_json1_1PrincipalList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Principal(entry, context);
    });
};
const serializeAws_json1_1PrivateChannelFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Project = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ProxyConfiguration = (input, context) => {
    return {
        ...(input.Credentials != null && { Credentials: input.Credentials }),
        ...(input.Host != null && { Host: input.Host }),
        ...(input.Port != null && { Port: input.Port }),
    };
};
const serializeAws_json1_1PublicChannelFilter = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1PutPrincipalMappingRequest = (input, context) => {
    return {
        ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
        ...(input.GroupId != null && { GroupId: input.GroupId }),
        ...(input.GroupMembers != null && { GroupMembers: serializeAws_json1_1GroupMembers(input.GroupMembers, context) }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.OrderingId != null && { OrderingId: input.OrderingId }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1QueryRequest = (input, context) => {
    return {
        ...(input.AttributeFilter != null && {
            AttributeFilter: serializeAws_json1_1AttributeFilter(input.AttributeFilter, context),
        }),
        ...(input.DocumentRelevanceOverrideConfigurations != null && {
            DocumentRelevanceOverrideConfigurations: serializeAws_json1_1DocumentRelevanceOverrideConfigurationList(input.DocumentRelevanceOverrideConfigurations, context),
        }),
        ...(input.Facets != null && { Facets: serializeAws_json1_1FacetList(input.Facets, context) }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.PageNumber != null && { PageNumber: input.PageNumber }),
        ...(input.PageSize != null && { PageSize: input.PageSize }),
        ...(input.QueryResultTypeFilter != null && { QueryResultTypeFilter: input.QueryResultTypeFilter }),
        ...(input.QueryText != null && { QueryText: input.QueryText }),
        ...(input.RequestedDocumentAttributes != null && {
            RequestedDocumentAttributes: serializeAws_json1_1DocumentAttributeKeyList(input.RequestedDocumentAttributes, context),
        }),
        ...(input.SortingConfiguration != null && {
            SortingConfiguration: serializeAws_json1_1SortingConfiguration(input.SortingConfiguration, context),
        }),
        ...(input.SpellCorrectionConfiguration != null && {
            SpellCorrectionConfiguration: serializeAws_json1_1SpellCorrectionConfiguration(input.SpellCorrectionConfiguration, context),
        }),
        ...(input.UserContext != null && { UserContext: serializeAws_json1_1UserContext(input.UserContext, context) }),
        ...(input.VisitorId != null && { VisitorId: input.VisitorId }),
    };
};
const serializeAws_json1_1QuipConfiguration = (input, context) => {
    return {
        ...(input.AttachmentFieldMappings != null && {
            AttachmentFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.AttachmentFieldMappings, context),
        }),
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
        ...(input.CrawlChatRooms != null && { CrawlChatRooms: input.CrawlChatRooms }),
        ...(input.CrawlFileComments != null && { CrawlFileComments: input.CrawlFileComments }),
        ...(input.Domain != null && { Domain: input.Domain }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FolderIds != null && { FolderIds: serializeAws_json1_1FolderIdList(input.FolderIds, context) }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.MessageFieldMappings != null && {
            MessageFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.MessageFieldMappings, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.ThreadFieldMappings != null && {
            ThreadFieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.ThreadFieldMappings, context),
        }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1Relevance = (input, context) => {
    return {
        ...(input.Duration != null && { Duration: input.Duration }),
        ...(input.Freshness != null && { Freshness: input.Freshness }),
        ...(input.Importance != null && { Importance: input.Importance }),
        ...(input.RankOrder != null && { RankOrder: input.RankOrder }),
        ...(input.ValueImportanceMap != null && {
            ValueImportanceMap: serializeAws_json1_1ValueImportanceMap(input.ValueImportanceMap, context),
        }),
    };
};
const serializeAws_json1_1RelevanceFeedback = (input, context) => {
    return {
        ...(input.RelevanceValue != null && { RelevanceValue: input.RelevanceValue }),
        ...(input.ResultId != null && { ResultId: input.ResultId }),
    };
};
const serializeAws_json1_1RelevanceFeedbackList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1RelevanceFeedback(entry, context);
    });
};
const serializeAws_json1_1RepositoryNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1S3DataSourceConfiguration = (input, context) => {
    return {
        ...(input.AccessControlListConfiguration != null && {
            AccessControlListConfiguration: serializeAws_json1_1AccessControlListConfiguration(input.AccessControlListConfiguration, context),
        }),
        ...(input.BucketName != null && { BucketName: input.BucketName }),
        ...(input.DocumentsMetadataConfiguration != null && {
            DocumentsMetadataConfiguration: serializeAws_json1_1DocumentsMetadataConfiguration(input.DocumentsMetadataConfiguration, context),
        }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.InclusionPrefixes != null && {
            InclusionPrefixes: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPrefixes, context),
        }),
    };
};
const serializeAws_json1_1S3Path = (input, context) => {
    return {
        ...(input.Bucket != null && { Bucket: input.Bucket }),
        ...(input.Key != null && { Key: input.Key }),
    };
};
const serializeAws_json1_1SaaSConfiguration = (input, context) => {
    return {
        ...(input.HostUrl != null && { HostUrl: input.HostUrl }),
        ...(input.OrganizationName != null && { OrganizationName: input.OrganizationName }),
    };
};
const serializeAws_json1_1SalesforceChatterFeedConfiguration = (input, context) => {
    return {
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.IncludeFilterTypes != null && {
            IncludeFilterTypes: serializeAws_json1_1SalesforceChatterFeedIncludeFilterTypes(input.IncludeFilterTypes, context),
        }),
    };
};
const serializeAws_json1_1SalesforceChatterFeedIncludeFilterTypes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SalesforceConfiguration = (input, context) => {
    return {
        ...(input.ChatterFeedConfiguration != null && {
            ChatterFeedConfiguration: serializeAws_json1_1SalesforceChatterFeedConfiguration(input.ChatterFeedConfiguration, context),
        }),
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
        ...(input.ExcludeAttachmentFilePatterns != null && {
            ExcludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExcludeAttachmentFilePatterns, context),
        }),
        ...(input.IncludeAttachmentFilePatterns != null && {
            IncludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.IncludeAttachmentFilePatterns, context),
        }),
        ...(input.KnowledgeArticleConfiguration != null && {
            KnowledgeArticleConfiguration: serializeAws_json1_1SalesforceKnowledgeArticleConfiguration(input.KnowledgeArticleConfiguration, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.ServerUrl != null && { ServerUrl: input.ServerUrl }),
        ...(input.StandardObjectAttachmentConfiguration != null && {
            StandardObjectAttachmentConfiguration: serializeAws_json1_1SalesforceStandardObjectAttachmentConfiguration(input.StandardObjectAttachmentConfiguration, context),
        }),
        ...(input.StandardObjectConfigurations != null && {
            StandardObjectConfigurations: serializeAws_json1_1SalesforceStandardObjectConfigurationList(input.StandardObjectConfigurations, context),
        }),
    };
};
const serializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfiguration = (input, context) => {
    return {
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfiguration(entry, context);
    });
};
const serializeAws_json1_1SalesforceKnowledgeArticleConfiguration = (input, context) => {
    return {
        ...(input.CustomKnowledgeArticleTypeConfigurations != null && {
            CustomKnowledgeArticleTypeConfigurations: serializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfigurationList(input.CustomKnowledgeArticleTypeConfigurations, context),
        }),
        ...(input.IncludedStates != null && {
            IncludedStates: serializeAws_json1_1SalesforceKnowledgeArticleStateList(input.IncludedStates, context),
        }),
        ...(input.StandardKnowledgeArticleTypeConfiguration != null && {
            StandardKnowledgeArticleTypeConfiguration: serializeAws_json1_1SalesforceStandardKnowledgeArticleTypeConfiguration(input.StandardKnowledgeArticleTypeConfiguration, context),
        }),
    };
};
const serializeAws_json1_1SalesforceKnowledgeArticleStateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SalesforceStandardKnowledgeArticleTypeConfiguration = (input, context) => {
    return {
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
    };
};
const serializeAws_json1_1SalesforceStandardObjectAttachmentConfiguration = (input, context) => {
    return {
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
    };
};
const serializeAws_json1_1SalesforceStandardObjectConfiguration = (input, context) => {
    return {
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1SalesforceStandardObjectConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1SalesforceStandardObjectConfiguration(entry, context);
    });
};
const serializeAws_json1_1Search = (input, context) => {
    return {
        ...(input.Displayable != null && { Displayable: input.Displayable }),
        ...(input.Facetable != null && { Facetable: input.Facetable }),
        ...(input.Searchable != null && { Searchable: input.Searchable }),
        ...(input.Sortable != null && { Sortable: input.Sortable }),
    };
};
const serializeAws_json1_1SecurityGroupIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SeedUrlConfiguration = (input, context) => {
    return {
        ...(input.SeedUrls != null && { SeedUrls: serializeAws_json1_1SeedUrlList(input.SeedUrls, context) }),
        ...(input.WebCrawlerMode != null && { WebCrawlerMode: input.WebCrawlerMode }),
    };
};
const serializeAws_json1_1SeedUrlList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ServerSideEncryptionConfiguration = (input, context) => {
    return {
        ...(input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId }),
    };
};
const serializeAws_json1_1ServiceNowConfiguration = (input, context) => {
    return {
        ...(input.AuthenticationType != null && { AuthenticationType: input.AuthenticationType }),
        ...(input.HostUrl != null && { HostUrl: input.HostUrl }),
        ...(input.KnowledgeArticleConfiguration != null && {
            KnowledgeArticleConfiguration: serializeAws_json1_1ServiceNowKnowledgeArticleConfiguration(input.KnowledgeArticleConfiguration, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.ServiceCatalogConfiguration != null && {
            ServiceCatalogConfiguration: serializeAws_json1_1ServiceNowServiceCatalogConfiguration(input.ServiceCatalogConfiguration, context),
        }),
        ...(input.ServiceNowBuildVersion != null && { ServiceNowBuildVersion: input.ServiceNowBuildVersion }),
    };
};
const serializeAws_json1_1ServiceNowKnowledgeArticleConfiguration = (input, context) => {
    return {
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.ExcludeAttachmentFilePatterns != null && {
            ExcludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExcludeAttachmentFilePatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.FilterQuery != null && { FilterQuery: input.FilterQuery }),
        ...(input.IncludeAttachmentFilePatterns != null && {
            IncludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.IncludeAttachmentFilePatterns, context),
        }),
    };
};
const serializeAws_json1_1ServiceNowServiceCatalogConfiguration = (input, context) => {
    return {
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
        ...(input.DocumentDataFieldName != null && { DocumentDataFieldName: input.DocumentDataFieldName }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.ExcludeAttachmentFilePatterns != null && {
            ExcludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExcludeAttachmentFilePatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.IncludeAttachmentFilePatterns != null && {
            IncludeAttachmentFilePatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.IncludeAttachmentFilePatterns, context),
        }),
    };
};
const serializeAws_json1_1SharePointConfiguration = (input, context) => {
    return {
        ...(input.AuthenticationType != null && { AuthenticationType: input.AuthenticationType }),
        ...(input.CrawlAttachments != null && { CrawlAttachments: input.CrawlAttachments }),
        ...(input.DisableLocalGroups != null && { DisableLocalGroups: input.DisableLocalGroups }),
        ...(input.DocumentTitleFieldName != null && { DocumentTitleFieldName: input.DocumentTitleFieldName }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.ProxyConfiguration != null && {
            ProxyConfiguration: serializeAws_json1_1ProxyConfiguration(input.ProxyConfiguration, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.SharePointVersion != null && { SharePointVersion: input.SharePointVersion }),
        ...(input.SslCertificateS3Path != null && {
            SslCertificateS3Path: serializeAws_json1_1S3Path(input.SslCertificateS3Path, context),
        }),
        ...(input.Urls != null && { Urls: serializeAws_json1_1SharePointUrlList(input.Urls, context) }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1SharePointUrlList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SiteMapsConfiguration = (input, context) => {
    return {
        ...(input.SiteMaps != null && { SiteMaps: serializeAws_json1_1SiteMapsList(input.SiteMaps, context) }),
    };
};
const serializeAws_json1_1SiteMapsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SlackConfiguration = (input, context) => {
    return {
        ...(input.CrawlBotMessage != null && { CrawlBotMessage: input.CrawlBotMessage }),
        ...(input.ExcludeArchived != null && { ExcludeArchived: input.ExcludeArchived }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.LookBackPeriod != null && { LookBackPeriod: input.LookBackPeriod }),
        ...(input.PrivateChannelFilter != null && {
            PrivateChannelFilter: serializeAws_json1_1PrivateChannelFilter(input.PrivateChannelFilter, context),
        }),
        ...(input.PublicChannelFilter != null && {
            PublicChannelFilter: serializeAws_json1_1PublicChannelFilter(input.PublicChannelFilter, context),
        }),
        ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
        ...(input.SinceCrawlDate != null && { SinceCrawlDate: input.SinceCrawlDate }),
        ...(input.SlackEntityList != null && {
            SlackEntityList: serializeAws_json1_1SlackEntityList(input.SlackEntityList, context),
        }),
        ...(input.TeamId != null && { TeamId: input.TeamId }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1SlackEntityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SortingConfiguration = (input, context) => {
    return {
        ...(input.DocumentAttributeKey != null && { DocumentAttributeKey: input.DocumentAttributeKey }),
        ...(input.SortOrder != null && { SortOrder: input.SortOrder }),
    };
};
const serializeAws_json1_1SpellCorrectionConfiguration = (input, context) => {
    return {
        ...(input.IncludeQuerySpellCheckSuggestions != null && {
            IncludeQuerySpellCheckSuggestions: input.IncludeQuerySpellCheckSuggestions,
        }),
    };
};
const serializeAws_json1_1SqlConfiguration = (input, context) => {
    return {
        ...(input.QueryIdentifiersEnclosingOption != null && {
            QueryIdentifiersEnclosingOption: input.QueryIdentifiersEnclosingOption,
        }),
    };
};
const serializeAws_json1_1StartDataSourceSyncJobRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1StopDataSourceSyncJobRequest = (input, context) => {
    return {
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
    };
};
const serializeAws_json1_1StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SubmitFeedbackRequest = (input, context) => {
    return {
        ...(input.ClickFeedbackItems != null && {
            ClickFeedbackItems: serializeAws_json1_1ClickFeedbackList(input.ClickFeedbackItems, context),
        }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.QueryId != null && { QueryId: input.QueryId }),
        ...(input.RelevanceFeedbackItems != null && {
            RelevanceFeedbackItems: serializeAws_json1_1RelevanceFeedbackList(input.RelevanceFeedbackItems, context),
        }),
    };
};
const serializeAws_json1_1SubnetIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.Key != null && { Key: input.Key }),
        ...(input.Value != null && { Value: input.Value }),
    };
};
const serializeAws_json1_1TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    };
};
const serializeAws_json1_1Template = (input, context) => {
    return input;
};
const serializeAws_json1_1TemplateConfiguration = (input, context) => {
    return {
        ...(input.Template != null && { Template: serializeAws_json1_1Template(input.Template, context) }),
    };
};
const serializeAws_json1_1TimeRange = (input, context) => {
    return {
        ...(input.EndTime != null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
        ...(input.StartTime != null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
    };
};
const serializeAws_json1_1UntagResourceRequest = (input, context) => {
    return {
        ...(input.ResourceARN != null && { ResourceARN: input.ResourceARN }),
        ...(input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
    };
};
const serializeAws_json1_1UpdateAccessControlConfigurationRequest = (input, context) => {
    return {
        ...(input.AccessControlList != null && {
            AccessControlList: serializeAws_json1_1PrincipalList(input.AccessControlList, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.HierarchicalAccessControlList != null && {
            HierarchicalAccessControlList: serializeAws_json1_1HierarchicalPrincipalList(input.HierarchicalAccessControlList, context),
        }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
    };
};
const serializeAws_json1_1UpdateDataSourceRequest = (input, context) => {
    return {
        ...(input.Configuration != null && {
            Configuration: serializeAws_json1_1DataSourceConfiguration(input.Configuration, context),
        }),
        ...(input.CustomDocumentEnrichmentConfiguration != null && {
            CustomDocumentEnrichmentConfiguration: serializeAws_json1_1CustomDocumentEnrichmentConfiguration(input.CustomDocumentEnrichmentConfiguration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.Schedule != null && { Schedule: input.Schedule }),
        ...(input.VpcConfiguration != null && {
            VpcConfiguration: serializeAws_json1_1DataSourceVpcConfiguration(input.VpcConfiguration, context),
        }),
    };
};
const serializeAws_json1_1UpdateExperienceRequest = (input, context) => {
    return {
        ...(input.Configuration != null && {
            Configuration: serializeAws_json1_1ExperienceConfiguration(input.Configuration, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    };
};
const serializeAws_json1_1UpdateIndexRequest = (input, context) => {
    return {
        ...(input.CapacityUnits != null && {
            CapacityUnits: serializeAws_json1_1CapacityUnitsConfiguration(input.CapacityUnits, context),
        }),
        ...(input.Description != null && { Description: input.Description }),
        ...(input.DocumentMetadataConfigurationUpdates != null && {
            DocumentMetadataConfigurationUpdates: serializeAws_json1_1DocumentMetadataConfigurationList(input.DocumentMetadataConfigurationUpdates, context),
        }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.UserContextPolicy != null && { UserContextPolicy: input.UserContextPolicy }),
        ...(input.UserGroupResolutionConfiguration != null && {
            UserGroupResolutionConfiguration: serializeAws_json1_1UserGroupResolutionConfiguration(input.UserGroupResolutionConfiguration, context),
        }),
        ...(input.UserTokenConfigurations != null && {
            UserTokenConfigurations: serializeAws_json1_1UserTokenConfigurationList(input.UserTokenConfigurations, context),
        }),
    };
};
const serializeAws_json1_1UpdateQuerySuggestionsBlockListRequest = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.SourceS3Path != null && { SourceS3Path: serializeAws_json1_1S3Path(input.SourceS3Path, context) }),
    };
};
const serializeAws_json1_1UpdateQuerySuggestionsConfigRequest = (input, context) => {
    return {
        ...(input.IncludeQueriesWithoutUserInformation != null && {
            IncludeQueriesWithoutUserInformation: input.IncludeQueriesWithoutUserInformation,
        }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.MinimumNumberOfQueryingUsers != null && {
            MinimumNumberOfQueryingUsers: input.MinimumNumberOfQueryingUsers,
        }),
        ...(input.MinimumQueryCount != null && { MinimumQueryCount: input.MinimumQueryCount }),
        ...(input.Mode != null && { Mode: input.Mode }),
        ...(input.QueryLogLookBackWindowInDays != null && {
            QueryLogLookBackWindowInDays: input.QueryLogLookBackWindowInDays,
        }),
    };
};
const serializeAws_json1_1UpdateThesaurusRequest = (input, context) => {
    return {
        ...(input.Description != null && { Description: input.Description }),
        ...(input.Id != null && { Id: input.Id }),
        ...(input.IndexId != null && { IndexId: input.IndexId }),
        ...(input.Name != null && { Name: input.Name }),
        ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
        ...(input.SourceS3Path != null && { SourceS3Path: serializeAws_json1_1S3Path(input.SourceS3Path, context) }),
    };
};
const serializeAws_json1_1Urls = (input, context) => {
    return {
        ...(input.SeedUrlConfiguration != null && {
            SeedUrlConfiguration: serializeAws_json1_1SeedUrlConfiguration(input.SeedUrlConfiguration, context),
        }),
        ...(input.SiteMapsConfiguration != null && {
            SiteMapsConfiguration: serializeAws_json1_1SiteMapsConfiguration(input.SiteMapsConfiguration, context),
        }),
    };
};
const serializeAws_json1_1UserContext = (input, context) => {
    return {
        ...(input.DataSourceGroups != null && {
            DataSourceGroups: serializeAws_json1_1DataSourceGroups(input.DataSourceGroups, context),
        }),
        ...(input.Groups != null && { Groups: serializeAws_json1_1Groups(input.Groups, context) }),
        ...(input.Token != null && { Token: input.Token }),
        ...(input.UserId != null && { UserId: input.UserId }),
    };
};
const serializeAws_json1_1UserGroupResolutionConfiguration = (input, context) => {
    return {
        ...(input.UserGroupResolutionMode != null && { UserGroupResolutionMode: input.UserGroupResolutionMode }),
    };
};
const serializeAws_json1_1UserIdentityConfiguration = (input, context) => {
    return {
        ...(input.IdentityAttributeName != null && { IdentityAttributeName: input.IdentityAttributeName }),
    };
};
const serializeAws_json1_1UserTokenConfiguration = (input, context) => {
    return {
        ...(input.JsonTokenTypeConfiguration != null && {
            JsonTokenTypeConfiguration: serializeAws_json1_1JsonTokenTypeConfiguration(input.JsonTokenTypeConfiguration, context),
        }),
        ...(input.JwtTokenTypeConfiguration != null && {
            JwtTokenTypeConfiguration: serializeAws_json1_1JwtTokenTypeConfiguration(input.JwtTokenTypeConfiguration, context),
        }),
    };
};
const serializeAws_json1_1UserTokenConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1UserTokenConfiguration(entry, context);
    });
};
const serializeAws_json1_1ValueImportanceMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const serializeAws_json1_1WebCrawlerConfiguration = (input, context) => {
    return {
        ...(input.AuthenticationConfiguration != null && {
            AuthenticationConfiguration: serializeAws_json1_1AuthenticationConfiguration(input.AuthenticationConfiguration, context),
        }),
        ...(input.CrawlDepth != null && { CrawlDepth: input.CrawlDepth }),
        ...(input.MaxContentSizePerPageInMegaBytes != null && {
            MaxContentSizePerPageInMegaBytes: __serializeFloat(input.MaxContentSizePerPageInMegaBytes),
        }),
        ...(input.MaxLinksPerPage != null && { MaxLinksPerPage: input.MaxLinksPerPage }),
        ...(input.MaxUrlsPerMinuteCrawlRate != null && { MaxUrlsPerMinuteCrawlRate: input.MaxUrlsPerMinuteCrawlRate }),
        ...(input.ProxyConfiguration != null && {
            ProxyConfiguration: serializeAws_json1_1ProxyConfiguration(input.ProxyConfiguration, context),
        }),
        ...(input.UrlExclusionPatterns != null && {
            UrlExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.UrlExclusionPatterns, context),
        }),
        ...(input.UrlInclusionPatterns != null && {
            UrlInclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.UrlInclusionPatterns, context),
        }),
        ...(input.Urls != null && { Urls: serializeAws_json1_1Urls(input.Urls, context) }),
    };
};
const serializeAws_json1_1WorkDocsConfiguration = (input, context) => {
    return {
        ...(input.CrawlComments != null && { CrawlComments: input.CrawlComments }),
        ...(input.ExclusionPatterns != null && {
            ExclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.ExclusionPatterns, context),
        }),
        ...(input.FieldMappings != null && {
            FieldMappings: serializeAws_json1_1DataSourceToIndexFieldMappingList(input.FieldMappings, context),
        }),
        ...(input.InclusionPatterns != null && {
            InclusionPatterns: serializeAws_json1_1DataSourceInclusionsExclusionsStrings(input.InclusionPatterns, context),
        }),
        ...(input.OrganizationId != null && { OrganizationId: input.OrganizationId }),
        ...(input.UseChangeLog != null && { UseChangeLog: input.UseChangeLog }),
    };
};
const deserializeAws_json1_1AccessControlConfigurationSummary = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1AccessControlConfigurationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AccessControlConfigurationSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AccessControlListConfiguration = (output, context) => {
    return {
        KeyPath: __expectString(output.KeyPath),
    };
};
const deserializeAws_json1_1AccessDeniedException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1AclConfiguration = (output, context) => {
    return {
        AllowedGroupsColumnName: __expectString(output.AllowedGroupsColumnName),
    };
};
const deserializeAws_json1_1AdditionalResultAttribute = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: output.Value != null ? deserializeAws_json1_1AdditionalResultAttributeValue(output.Value, context) : undefined,
        ValueType: __expectString(output.ValueType),
    };
};
const deserializeAws_json1_1AdditionalResultAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1AdditionalResultAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AdditionalResultAttributeValue = (output, context) => {
    return {
        TextWithHighlightsValue: output.TextWithHighlightsValue != null
            ? deserializeAws_json1_1TextWithHighlights(output.TextWithHighlightsValue, context)
            : undefined,
    };
};
const deserializeAws_json1_1AlfrescoConfiguration = (output, context) => {
    return {
        BlogFieldMappings: output.BlogFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.BlogFieldMappings, context)
            : undefined,
        CrawlComments: __expectBoolean(output.CrawlComments),
        CrawlSystemFolders: __expectBoolean(output.CrawlSystemFolders),
        DocumentLibraryFieldMappings: output.DocumentLibraryFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.DocumentLibraryFieldMappings, context)
            : undefined,
        EntityFilter: output.EntityFilter != null ? deserializeAws_json1_1EntityFilter(output.EntityFilter, context) : undefined,
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        SiteId: __expectString(output.SiteId),
        SiteUrl: __expectString(output.SiteUrl),
        SslCertificateS3Path: output.SslCertificateS3Path != null
            ? deserializeAws_json1_1S3Path(output.SslCertificateS3Path, context)
            : undefined,
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
        WikiFieldMappings: output.WikiFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.WikiFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1AssociateEntitiesToExperienceFailedEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FailedEntity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1AssociateEntitiesToExperienceResponse = (output, context) => {
    return {
        FailedEntityList: output.FailedEntityList != null
            ? deserializeAws_json1_1AssociateEntitiesToExperienceFailedEntityList(output.FailedEntityList, context)
            : undefined,
    };
};
const deserializeAws_json1_1AssociatePersonasToEntitiesResponse = (output, context) => {
    return {
        FailedEntityList: output.FailedEntityList != null
            ? deserializeAws_json1_1FailedEntityList(output.FailedEntityList, context)
            : undefined,
    };
};
const deserializeAws_json1_1AuthenticationConfiguration = (output, context) => {
    return {
        BasicAuthentication: output.BasicAuthentication != null
            ? deserializeAws_json1_1BasicAuthenticationConfigurationList(output.BasicAuthentication, context)
            : undefined,
    };
};
const deserializeAws_json1_1BasicAuthenticationConfiguration = (output, context) => {
    return {
        Credentials: __expectString(output.Credentials),
        Host: __expectString(output.Host),
        Port: __expectInt32(output.Port),
    };
};
const deserializeAws_json1_1BasicAuthenticationConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BasicAuthenticationConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BatchDeleteDocumentResponse = (output, context) => {
    return {
        FailedDocuments: output.FailedDocuments != null
            ? deserializeAws_json1_1BatchDeleteDocumentResponseFailedDocuments(output.FailedDocuments, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchDeleteDocumentResponseFailedDocument = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1BatchDeleteDocumentResponseFailedDocuments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchDeleteDocumentResponseFailedDocument(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BatchGetDocumentStatusResponse = (output, context) => {
    return {
        DocumentStatusList: output.DocumentStatusList != null
            ? deserializeAws_json1_1DocumentStatusList(output.DocumentStatusList, context)
            : undefined,
        Errors: output.Errors != null
            ? deserializeAws_json1_1BatchGetDocumentStatusResponseErrors(output.Errors, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetDocumentStatusResponseError = (output, context) => {
    return {
        DocumentId: __expectString(output.DocumentId),
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
    };
};
const deserializeAws_json1_1BatchGetDocumentStatusResponseErrors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchGetDocumentStatusResponseError(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BatchPutDocumentResponse = (output, context) => {
    return {
        FailedDocuments: output.FailedDocuments != null
            ? deserializeAws_json1_1BatchPutDocumentResponseFailedDocuments(output.FailedDocuments, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchPutDocumentResponseFailedDocument = (output, context) => {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1BatchPutDocumentResponseFailedDocuments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BatchPutDocumentResponseFailedDocument(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BoxConfiguration = (output, context) => {
    return {
        CommentFieldMappings: output.CommentFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.CommentFieldMappings, context)
            : undefined,
        CrawlComments: __expectBoolean(output.CrawlComments),
        CrawlTasks: __expectBoolean(output.CrawlTasks),
        CrawlWebLinks: __expectBoolean(output.CrawlWebLinks),
        EnterpriseId: __expectString(output.EnterpriseId),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FileFieldMappings: output.FileFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FileFieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        TaskFieldMappings: output.TaskFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.TaskFieldMappings, context)
            : undefined,
        UseChangeLog: __expectBoolean(output.UseChangeLog),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
        WebLinkFieldMappings: output.WebLinkFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.WebLinkFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1CapacityUnitsConfiguration = (output, context) => {
    return {
        QueryCapacityUnits: __expectInt32(output.QueryCapacityUnits),
        StorageCapacityUnits: __expectInt32(output.StorageCapacityUnits),
    };
};
const deserializeAws_json1_1ChangeDetectingColumns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ColumnConfiguration = (output, context) => {
    return {
        ChangeDetectingColumns: output.ChangeDetectingColumns != null
            ? deserializeAws_json1_1ChangeDetectingColumns(output.ChangeDetectingColumns, context)
            : undefined,
        DocumentDataColumnName: __expectString(output.DocumentDataColumnName),
        DocumentIdColumnName: __expectString(output.DocumentIdColumnName),
        DocumentTitleColumnName: __expectString(output.DocumentTitleColumnName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConflictException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ConfluenceAttachmentConfiguration = (output, context) => {
    return {
        AttachmentFieldMappings: output.AttachmentFieldMappings != null
            ? deserializeAws_json1_1ConfluenceAttachmentFieldMappingsList(output.AttachmentFieldMappings, context)
            : undefined,
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
    };
};
const deserializeAws_json1_1ConfluenceAttachmentFieldMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfluenceAttachmentToIndexFieldMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfluenceAttachmentToIndexFieldMapping = (output, context) => {
    return {
        DataSourceFieldName: __expectString(output.DataSourceFieldName),
        DateFieldFormat: __expectString(output.DateFieldFormat),
        IndexFieldName: __expectString(output.IndexFieldName),
    };
};
const deserializeAws_json1_1ConfluenceBlogConfiguration = (output, context) => {
    return {
        BlogFieldMappings: output.BlogFieldMappings != null
            ? deserializeAws_json1_1ConfluenceBlogFieldMappingsList(output.BlogFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConfluenceBlogFieldMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfluenceBlogToIndexFieldMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfluenceBlogToIndexFieldMapping = (output, context) => {
    return {
        DataSourceFieldName: __expectString(output.DataSourceFieldName),
        DateFieldFormat: __expectString(output.DateFieldFormat),
        IndexFieldName: __expectString(output.IndexFieldName),
    };
};
const deserializeAws_json1_1ConfluenceConfiguration = (output, context) => {
    return {
        AttachmentConfiguration: output.AttachmentConfiguration != null
            ? deserializeAws_json1_1ConfluenceAttachmentConfiguration(output.AttachmentConfiguration, context)
            : undefined,
        AuthenticationType: __expectString(output.AuthenticationType),
        BlogConfiguration: output.BlogConfiguration != null
            ? deserializeAws_json1_1ConfluenceBlogConfiguration(output.BlogConfiguration, context)
            : undefined,
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        PageConfiguration: output.PageConfiguration != null
            ? deserializeAws_json1_1ConfluencePageConfiguration(output.PageConfiguration, context)
            : undefined,
        ProxyConfiguration: output.ProxyConfiguration != null
            ? deserializeAws_json1_1ProxyConfiguration(output.ProxyConfiguration, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        ServerUrl: __expectString(output.ServerUrl),
        SpaceConfiguration: output.SpaceConfiguration != null
            ? deserializeAws_json1_1ConfluenceSpaceConfiguration(output.SpaceConfiguration, context)
            : undefined,
        Version: __expectString(output.Version),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConfluencePageConfiguration = (output, context) => {
    return {
        PageFieldMappings: output.PageFieldMappings != null
            ? deserializeAws_json1_1ConfluencePageFieldMappingsList(output.PageFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConfluencePageFieldMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfluencePageToIndexFieldMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfluencePageToIndexFieldMapping = (output, context) => {
    return {
        DataSourceFieldName: __expectString(output.DataSourceFieldName),
        DateFieldFormat: __expectString(output.DateFieldFormat),
        IndexFieldName: __expectString(output.IndexFieldName),
    };
};
const deserializeAws_json1_1ConfluenceSpaceConfiguration = (output, context) => {
    return {
        CrawlArchivedSpaces: __expectBoolean(output.CrawlArchivedSpaces),
        CrawlPersonalSpaces: __expectBoolean(output.CrawlPersonalSpaces),
        ExcludeSpaces: output.ExcludeSpaces != null
            ? deserializeAws_json1_1ConfluenceSpaceList(output.ExcludeSpaces, context)
            : undefined,
        IncludeSpaces: output.IncludeSpaces != null
            ? deserializeAws_json1_1ConfluenceSpaceList(output.IncludeSpaces, context)
            : undefined,
        SpaceFieldMappings: output.SpaceFieldMappings != null
            ? deserializeAws_json1_1ConfluenceSpaceFieldMappingsList(output.SpaceFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1ConfluenceSpaceFieldMappingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ConfluenceSpaceToIndexFieldMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConfluenceSpaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ConfluenceSpaceToIndexFieldMapping = (output, context) => {
    return {
        DataSourceFieldName: __expectString(output.DataSourceFieldName),
        DateFieldFormat: __expectString(output.DateFieldFormat),
        IndexFieldName: __expectString(output.IndexFieldName),
    };
};
const deserializeAws_json1_1ConnectionConfiguration = (output, context) => {
    return {
        DatabaseHost: __expectString(output.DatabaseHost),
        DatabaseName: __expectString(output.DatabaseName),
        DatabasePort: __expectInt32(output.DatabasePort),
        SecretArn: __expectString(output.SecretArn),
        TableName: __expectString(output.TableName),
    };
};
const deserializeAws_json1_1ContentSourceConfiguration = (output, context) => {
    return {
        DataSourceIds: output.DataSourceIds != null ? deserializeAws_json1_1DataSourceIdList(output.DataSourceIds, context) : undefined,
        DirectPutContent: __expectBoolean(output.DirectPutContent),
        FaqIds: output.FaqIds != null ? deserializeAws_json1_1FaqIdsList(output.FaqIds, context) : undefined,
    };
};
const deserializeAws_json1_1Correction = (output, context) => {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        CorrectedTerm: __expectString(output.CorrectedTerm),
        EndOffset: __expectInt32(output.EndOffset),
        Term: __expectString(output.Term),
    };
};
const deserializeAws_json1_1CorrectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Correction(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1CreateAccessControlConfigurationResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateDataSourceResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateExperienceResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateFaqResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateIndexResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateQuerySuggestionsBlockListResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CreateThesaurusResponse = (output, context) => {
    return {
        Id: __expectString(output.Id),
    };
};
const deserializeAws_json1_1CustomDocumentEnrichmentConfiguration = (output, context) => {
    return {
        InlineConfigurations: output.InlineConfigurations != null
            ? deserializeAws_json1_1InlineCustomDocumentEnrichmentConfigurationList(output.InlineConfigurations, context)
            : undefined,
        PostExtractionHookConfiguration: output.PostExtractionHookConfiguration != null
            ? deserializeAws_json1_1HookConfiguration(output.PostExtractionHookConfiguration, context)
            : undefined,
        PreExtractionHookConfiguration: output.PreExtractionHookConfiguration != null
            ? deserializeAws_json1_1HookConfiguration(output.PreExtractionHookConfiguration, context)
            : undefined,
        RoleArn: __expectString(output.RoleArn),
    };
};
const deserializeAws_json1_1DatabaseConfiguration = (output, context) => {
    return {
        AclConfiguration: output.AclConfiguration != null
            ? deserializeAws_json1_1AclConfiguration(output.AclConfiguration, context)
            : undefined,
        ColumnConfiguration: output.ColumnConfiguration != null
            ? deserializeAws_json1_1ColumnConfiguration(output.ColumnConfiguration, context)
            : undefined,
        ConnectionConfiguration: output.ConnectionConfiguration != null
            ? deserializeAws_json1_1ConnectionConfiguration(output.ConnectionConfiguration, context)
            : undefined,
        DatabaseEngineType: __expectString(output.DatabaseEngineType),
        SqlConfiguration: output.SqlConfiguration != null
            ? deserializeAws_json1_1SqlConfiguration(output.SqlConfiguration, context)
            : undefined,
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1DataSourceConfiguration = (output, context) => {
    return {
        AlfrescoConfiguration: output.AlfrescoConfiguration != null
            ? deserializeAws_json1_1AlfrescoConfiguration(output.AlfrescoConfiguration, context)
            : undefined,
        BoxConfiguration: output.BoxConfiguration != null
            ? deserializeAws_json1_1BoxConfiguration(output.BoxConfiguration, context)
            : undefined,
        ConfluenceConfiguration: output.ConfluenceConfiguration != null
            ? deserializeAws_json1_1ConfluenceConfiguration(output.ConfluenceConfiguration, context)
            : undefined,
        DatabaseConfiguration: output.DatabaseConfiguration != null
            ? deserializeAws_json1_1DatabaseConfiguration(output.DatabaseConfiguration, context)
            : undefined,
        FsxConfiguration: output.FsxConfiguration != null
            ? deserializeAws_json1_1FsxConfiguration(output.FsxConfiguration, context)
            : undefined,
        GitHubConfiguration: output.GitHubConfiguration != null
            ? deserializeAws_json1_1GitHubConfiguration(output.GitHubConfiguration, context)
            : undefined,
        GoogleDriveConfiguration: output.GoogleDriveConfiguration != null
            ? deserializeAws_json1_1GoogleDriveConfiguration(output.GoogleDriveConfiguration, context)
            : undefined,
        JiraConfiguration: output.JiraConfiguration != null
            ? deserializeAws_json1_1JiraConfiguration(output.JiraConfiguration, context)
            : undefined,
        OneDriveConfiguration: output.OneDriveConfiguration != null
            ? deserializeAws_json1_1OneDriveConfiguration(output.OneDriveConfiguration, context)
            : undefined,
        QuipConfiguration: output.QuipConfiguration != null
            ? deserializeAws_json1_1QuipConfiguration(output.QuipConfiguration, context)
            : undefined,
        S3Configuration: output.S3Configuration != null
            ? deserializeAws_json1_1S3DataSourceConfiguration(output.S3Configuration, context)
            : undefined,
        SalesforceConfiguration: output.SalesforceConfiguration != null
            ? deserializeAws_json1_1SalesforceConfiguration(output.SalesforceConfiguration, context)
            : undefined,
        ServiceNowConfiguration: output.ServiceNowConfiguration != null
            ? deserializeAws_json1_1ServiceNowConfiguration(output.ServiceNowConfiguration, context)
            : undefined,
        SharePointConfiguration: output.SharePointConfiguration != null
            ? deserializeAws_json1_1SharePointConfiguration(output.SharePointConfiguration, context)
            : undefined,
        SlackConfiguration: output.SlackConfiguration != null
            ? deserializeAws_json1_1SlackConfiguration(output.SlackConfiguration, context)
            : undefined,
        TemplateConfiguration: output.TemplateConfiguration != null
            ? deserializeAws_json1_1TemplateConfiguration(output.TemplateConfiguration, context)
            : undefined,
        WebCrawlerConfiguration: output.WebCrawlerConfiguration != null
            ? deserializeAws_json1_1WebCrawlerConfiguration(output.WebCrawlerConfiguration, context)
            : undefined,
        WorkDocsConfiguration: output.WorkDocsConfiguration != null
            ? deserializeAws_json1_1WorkDocsConfiguration(output.WorkDocsConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1DataSourceIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DataSourceInclusionsExclusionsStrings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DataSourceSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Id: __expectString(output.Id),
        LanguageCode: __expectString(output.LanguageCode),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
        Type: __expectString(output.Type),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1DataSourceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DataSourceSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DataSourceSyncJob = (output, context) => {
    return {
        DataSourceErrorCode: __expectString(output.DataSourceErrorCode),
        EndTime: output.EndTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EndTime))) : undefined,
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        ExecutionId: __expectString(output.ExecutionId),
        Metrics: output.Metrics != null ? deserializeAws_json1_1DataSourceSyncJobMetrics(output.Metrics, context) : undefined,
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1DataSourceSyncJobHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DataSourceSyncJob(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DataSourceSyncJobMetrics = (output, context) => {
    return {
        DocumentsAdded: __expectString(output.DocumentsAdded),
        DocumentsDeleted: __expectString(output.DocumentsDeleted),
        DocumentsFailed: __expectString(output.DocumentsFailed),
        DocumentsModified: __expectString(output.DocumentsModified),
        DocumentsScanned: __expectString(output.DocumentsScanned),
    };
};
const deserializeAws_json1_1DataSourceToIndexFieldMapping = (output, context) => {
    return {
        DataSourceFieldName: __expectString(output.DataSourceFieldName),
        DateFieldFormat: __expectString(output.DateFieldFormat),
        IndexFieldName: __expectString(output.IndexFieldName),
    };
};
const deserializeAws_json1_1DataSourceToIndexFieldMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DataSourceToIndexFieldMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DataSourceVpcConfiguration = (output, context) => {
    return {
        SecurityGroupIds: output.SecurityGroupIds != null
            ? deserializeAws_json1_1SecurityGroupIdList(output.SecurityGroupIds, context)
            : undefined,
        SubnetIds: output.SubnetIds != null ? deserializeAws_json1_1SubnetIdList(output.SubnetIds, context) : undefined,
    };
};
const deserializeAws_json1_1DeleteAccessControlConfigurationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteExperienceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1DescribeAccessControlConfigurationResponse = (output, context) => {
    return {
        AccessControlList: output.AccessControlList != null
            ? deserializeAws_json1_1PrincipalList(output.AccessControlList, context)
            : undefined,
        Description: __expectString(output.Description),
        ErrorMessage: __expectString(output.ErrorMessage),
        HierarchicalAccessControlList: output.HierarchicalAccessControlList != null
            ? deserializeAws_json1_1HierarchicalPrincipalList(output.HierarchicalAccessControlList, context)
            : undefined,
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1DescribeDataSourceResponse = (output, context) => {
    return {
        Configuration: output.Configuration != null
            ? deserializeAws_json1_1DataSourceConfiguration(output.Configuration, context)
            : undefined,
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        CustomDocumentEnrichmentConfiguration: output.CustomDocumentEnrichmentConfiguration != null
            ? deserializeAws_json1_1CustomDocumentEnrichmentConfiguration(output.CustomDocumentEnrichmentConfiguration, context)
            : undefined,
        Description: __expectString(output.Description),
        ErrorMessage: __expectString(output.ErrorMessage),
        Id: __expectString(output.Id),
        IndexId: __expectString(output.IndexId),
        LanguageCode: __expectString(output.LanguageCode),
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        Schedule: __expectString(output.Schedule),
        Status: __expectString(output.Status),
        Type: __expectString(output.Type),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeExperienceResponse = (output, context) => {
    return {
        Configuration: output.Configuration != null
            ? deserializeAws_json1_1ExperienceConfiguration(output.Configuration, context)
            : undefined,
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Description: __expectString(output.Description),
        Endpoints: output.Endpoints != null ? deserializeAws_json1_1ExperienceEndpoints(output.Endpoints, context) : undefined,
        ErrorMessage: __expectString(output.ErrorMessage),
        Id: __expectString(output.Id),
        IndexId: __expectString(output.IndexId),
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1DescribeFaqResponse = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Description: __expectString(output.Description),
        ErrorMessage: __expectString(output.ErrorMessage),
        FileFormat: __expectString(output.FileFormat),
        Id: __expectString(output.Id),
        IndexId: __expectString(output.IndexId),
        LanguageCode: __expectString(output.LanguageCode),
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        S3Path: output.S3Path != null ? deserializeAws_json1_1S3Path(output.S3Path, context) : undefined,
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1DescribeIndexResponse = (output, context) => {
    return {
        CapacityUnits: output.CapacityUnits != null
            ? deserializeAws_json1_1CapacityUnitsConfiguration(output.CapacityUnits, context)
            : undefined,
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Description: __expectString(output.Description),
        DocumentMetadataConfigurations: output.DocumentMetadataConfigurations != null
            ? deserializeAws_json1_1DocumentMetadataConfigurationList(output.DocumentMetadataConfigurations, context)
            : undefined,
        Edition: __expectString(output.Edition),
        ErrorMessage: __expectString(output.ErrorMessage),
        Id: __expectString(output.Id),
        IndexStatistics: output.IndexStatistics != null
            ? deserializeAws_json1_1IndexStatistics(output.IndexStatistics, context)
            : undefined,
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        ServerSideEncryptionConfiguration: output.ServerSideEncryptionConfiguration != null
            ? deserializeAws_json1_1ServerSideEncryptionConfiguration(output.ServerSideEncryptionConfiguration, context)
            : undefined,
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
        UserContextPolicy: __expectString(output.UserContextPolicy),
        UserGroupResolutionConfiguration: output.UserGroupResolutionConfiguration != null
            ? deserializeAws_json1_1UserGroupResolutionConfiguration(output.UserGroupResolutionConfiguration, context)
            : undefined,
        UserTokenConfigurations: output.UserTokenConfigurations != null
            ? deserializeAws_json1_1UserTokenConfigurationList(output.UserTokenConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribePrincipalMappingResponse = (output, context) => {
    return {
        DataSourceId: __expectString(output.DataSourceId),
        GroupId: __expectString(output.GroupId),
        GroupOrderingIdSummaries: output.GroupOrderingIdSummaries != null
            ? deserializeAws_json1_1GroupOrderingIdSummaries(output.GroupOrderingIdSummaries, context)
            : undefined,
        IndexId: __expectString(output.IndexId),
    };
};
const deserializeAws_json1_1DescribeQuerySuggestionsBlockListResponse = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Description: __expectString(output.Description),
        ErrorMessage: __expectString(output.ErrorMessage),
        FileSizeBytes: __expectLong(output.FileSizeBytes),
        Id: __expectString(output.Id),
        IndexId: __expectString(output.IndexId),
        ItemCount: __expectInt32(output.ItemCount),
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        SourceS3Path: output.SourceS3Path != null ? deserializeAws_json1_1S3Path(output.SourceS3Path, context) : undefined,
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1DescribeQuerySuggestionsConfigResponse = (output, context) => {
    return {
        IncludeQueriesWithoutUserInformation: __expectBoolean(output.IncludeQueriesWithoutUserInformation),
        LastClearTime: output.LastClearTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastClearTime)))
            : undefined,
        LastSuggestionsBuildTime: output.LastSuggestionsBuildTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastSuggestionsBuildTime)))
            : undefined,
        MinimumNumberOfQueryingUsers: __expectInt32(output.MinimumNumberOfQueryingUsers),
        MinimumQueryCount: __expectInt32(output.MinimumQueryCount),
        Mode: __expectString(output.Mode),
        QueryLogLookBackWindowInDays: __expectInt32(output.QueryLogLookBackWindowInDays),
        Status: __expectString(output.Status),
        TotalSuggestionsCount: __expectInt32(output.TotalSuggestionsCount),
    };
};
const deserializeAws_json1_1DescribeThesaurusResponse = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Description: __expectString(output.Description),
        ErrorMessage: __expectString(output.ErrorMessage),
        FileSizeBytes: __expectLong(output.FileSizeBytes),
        Id: __expectString(output.Id),
        IndexId: __expectString(output.IndexId),
        Name: __expectString(output.Name),
        RoleArn: __expectString(output.RoleArn),
        SourceS3Path: output.SourceS3Path != null ? deserializeAws_json1_1S3Path(output.SourceS3Path, context) : undefined,
        Status: __expectString(output.Status),
        SynonymRuleCount: __expectLong(output.SynonymRuleCount),
        TermCount: __expectLong(output.TermCount),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1DisassociateEntitiesFromExperienceResponse = (output, context) => {
    return {
        FailedEntityList: output.FailedEntityList != null
            ? deserializeAws_json1_1FailedEntityList(output.FailedEntityList, context)
            : undefined,
    };
};
const deserializeAws_json1_1DisassociatePersonasFromEntitiesResponse = (output, context) => {
    return {
        FailedEntityList: output.FailedEntityList != null
            ? deserializeAws_json1_1FailedEntityList(output.FailedEntityList, context)
            : undefined,
    };
};
const deserializeAws_json1_1DocumentAttribute = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: output.Value != null ? deserializeAws_json1_1DocumentAttributeValue(output.Value, context) : undefined,
    };
};
const deserializeAws_json1_1DocumentAttributeCondition = (output, context) => {
    return {
        ConditionDocumentAttributeKey: __expectString(output.ConditionDocumentAttributeKey),
        ConditionOnValue: output.ConditionOnValue != null
            ? deserializeAws_json1_1DocumentAttributeValue(output.ConditionOnValue, context)
            : undefined,
        Operator: __expectString(output.Operator),
    };
};
const deserializeAws_json1_1DocumentAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DocumentAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DocumentAttributeStringListValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1DocumentAttributeTarget = (output, context) => {
    return {
        TargetDocumentAttributeKey: __expectString(output.TargetDocumentAttributeKey),
        TargetDocumentAttributeValue: output.TargetDocumentAttributeValue != null
            ? deserializeAws_json1_1DocumentAttributeValue(output.TargetDocumentAttributeValue, context)
            : undefined,
        TargetDocumentAttributeValueDeletion: __expectBoolean(output.TargetDocumentAttributeValueDeletion),
    };
};
const deserializeAws_json1_1DocumentAttributeValue = (output, context) => {
    return {
        DateValue: output.DateValue != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.DateValue))) : undefined,
        LongValue: __expectLong(output.LongValue),
        StringListValue: output.StringListValue != null
            ? deserializeAws_json1_1DocumentAttributeStringListValue(output.StringListValue, context)
            : undefined,
        StringValue: __expectString(output.StringValue),
    };
};
const deserializeAws_json1_1DocumentAttributeValueCountPair = (output, context) => {
    return {
        Count: __expectInt32(output.Count),
        DocumentAttributeValue: output.DocumentAttributeValue != null
            ? deserializeAws_json1_1DocumentAttributeValue(output.DocumentAttributeValue, context)
            : undefined,
        FacetResults: output.FacetResults != null ? deserializeAws_json1_1FacetResultList(output.FacetResults, context) : undefined,
    };
};
const deserializeAws_json1_1DocumentAttributeValueCountPairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DocumentAttributeValueCountPair(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DocumentMetadataConfiguration = (output, context) => {
    return {
        Name: __expectString(output.Name),
        Relevance: output.Relevance != null ? deserializeAws_json1_1Relevance(output.Relevance, context) : undefined,
        Search: output.Search != null ? deserializeAws_json1_1Search(output.Search, context) : undefined,
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1DocumentMetadataConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1DocumentMetadataConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DocumentsMetadataConfiguration = (output, context) => {
    return {
        S3Prefix: __expectString(output.S3Prefix),
    };
};
const deserializeAws_json1_1DocumentStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Status(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EntityDisplayData = (output, context) => {
    return {
        FirstName: __expectString(output.FirstName),
        GroupName: __expectString(output.GroupName),
        IdentifiedUserName: __expectString(output.IdentifiedUserName),
        LastName: __expectString(output.LastName),
        UserName: __expectString(output.UserName),
    };
};
const deserializeAws_json1_1EntityFilter = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExcludeMimeTypesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExcludeSharedDrivesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExcludeUserAccountsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExperienceConfiguration = (output, context) => {
    return {
        ContentSourceConfiguration: output.ContentSourceConfiguration != null
            ? deserializeAws_json1_1ContentSourceConfiguration(output.ContentSourceConfiguration, context)
            : undefined,
        UserIdentityConfiguration: output.UserIdentityConfiguration != null
            ? deserializeAws_json1_1UserIdentityConfiguration(output.UserIdentityConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1ExperienceEndpoint = (output, context) => {
    return {
        Endpoint: __expectString(output.Endpoint),
        EndpointType: __expectString(output.EndpointType),
    };
};
const deserializeAws_json1_1ExperienceEndpoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ExperienceEndpoint(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ExperienceEntitiesSummary = (output, context) => {
    return {
        DisplayData: output.DisplayData != null ? deserializeAws_json1_1EntityDisplayData(output.DisplayData, context) : undefined,
        EntityId: __expectString(output.EntityId),
        EntityType: __expectString(output.EntityType),
    };
};
const deserializeAws_json1_1ExperienceEntitiesSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ExperienceEntitiesSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ExperiencesSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Endpoints: output.Endpoints != null ? deserializeAws_json1_1ExperienceEndpoints(output.Endpoints, context) : undefined,
        Id: __expectString(output.Id),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1ExperiencesSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ExperiencesSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FacetResult = (output, context) => {
    return {
        DocumentAttributeKey: __expectString(output.DocumentAttributeKey),
        DocumentAttributeValueCountPairs: output.DocumentAttributeValueCountPairs != null
            ? deserializeAws_json1_1DocumentAttributeValueCountPairList(output.DocumentAttributeValueCountPairs, context)
            : undefined,
        DocumentAttributeValueType: __expectString(output.DocumentAttributeValueType),
    };
};
const deserializeAws_json1_1FacetResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FacetResult(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FailedEntity = (output, context) => {
    return {
        EntityId: __expectString(output.EntityId),
        ErrorMessage: __expectString(output.ErrorMessage),
    };
};
const deserializeAws_json1_1FailedEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FailedEntity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FaqIdsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1FaqStatistics = (output, context) => {
    return {
        IndexedQuestionAnswersCount: __expectInt32(output.IndexedQuestionAnswersCount),
    };
};
const deserializeAws_json1_1FaqSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        FileFormat: __expectString(output.FileFormat),
        Id: __expectString(output.Id),
        LanguageCode: __expectString(output.LanguageCode),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1FaqSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FaqSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FolderIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1FsxConfiguration = (output, context) => {
    return {
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        FileSystemId: __expectString(output.FileSystemId),
        FileSystemType: __expectString(output.FileSystemType),
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1GetQuerySuggestionsResponse = (output, context) => {
    return {
        QuerySuggestionsId: __expectString(output.QuerySuggestionsId),
        Suggestions: output.Suggestions != null ? deserializeAws_json1_1SuggestionList(output.Suggestions, context) : undefined,
    };
};
const deserializeAws_json1_1GetSnapshotsResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SnapShotTimeFilter: output.SnapShotTimeFilter != null
            ? deserializeAws_json1_1TimeRange(output.SnapShotTimeFilter, context)
            : undefined,
        SnapshotsData: output.SnapshotsData != null
            ? deserializeAws_json1_1SnapshotsDataRecords(output.SnapshotsData, context)
            : undefined,
        SnapshotsDataHeader: output.SnapshotsDataHeader != null
            ? deserializeAws_json1_1SnapshotsDataHeaderFields(output.SnapshotsDataHeader, context)
            : undefined,
    };
};
const deserializeAws_json1_1GitHubConfiguration = (output, context) => {
    return {
        ExclusionFileNamePatterns: output.ExclusionFileNamePatterns != null
            ? deserializeAws_json1_1StringList(output.ExclusionFileNamePatterns, context)
            : undefined,
        ExclusionFileTypePatterns: output.ExclusionFileTypePatterns != null
            ? deserializeAws_json1_1StringList(output.ExclusionFileTypePatterns, context)
            : undefined,
        ExclusionFolderNamePatterns: output.ExclusionFolderNamePatterns != null
            ? deserializeAws_json1_1StringList(output.ExclusionFolderNamePatterns, context)
            : undefined,
        GitHubCommitConfigurationFieldMappings: output.GitHubCommitConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubCommitConfigurationFieldMappings, context)
            : undefined,
        GitHubDocumentCrawlProperties: output.GitHubDocumentCrawlProperties != null
            ? deserializeAws_json1_1GitHubDocumentCrawlProperties(output.GitHubDocumentCrawlProperties, context)
            : undefined,
        GitHubIssueAttachmentConfigurationFieldMappings: output.GitHubIssueAttachmentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubIssueAttachmentConfigurationFieldMappings, context)
            : undefined,
        GitHubIssueCommentConfigurationFieldMappings: output.GitHubIssueCommentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubIssueCommentConfigurationFieldMappings, context)
            : undefined,
        GitHubIssueDocumentConfigurationFieldMappings: output.GitHubIssueDocumentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubIssueDocumentConfigurationFieldMappings, context)
            : undefined,
        GitHubPullRequestCommentConfigurationFieldMappings: output.GitHubPullRequestCommentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubPullRequestCommentConfigurationFieldMappings, context)
            : undefined,
        GitHubPullRequestDocumentAttachmentConfigurationFieldMappings: output.GitHubPullRequestDocumentAttachmentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubPullRequestDocumentAttachmentConfigurationFieldMappings, context)
            : undefined,
        GitHubPullRequestDocumentConfigurationFieldMappings: output.GitHubPullRequestDocumentConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubPullRequestDocumentConfigurationFieldMappings, context)
            : undefined,
        GitHubRepositoryConfigurationFieldMappings: output.GitHubRepositoryConfigurationFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.GitHubRepositoryConfigurationFieldMappings, context)
            : undefined,
        InclusionFileNamePatterns: output.InclusionFileNamePatterns != null
            ? deserializeAws_json1_1StringList(output.InclusionFileNamePatterns, context)
            : undefined,
        InclusionFileTypePatterns: output.InclusionFileTypePatterns != null
            ? deserializeAws_json1_1StringList(output.InclusionFileTypePatterns, context)
            : undefined,
        InclusionFolderNamePatterns: output.InclusionFolderNamePatterns != null
            ? deserializeAws_json1_1StringList(output.InclusionFolderNamePatterns, context)
            : undefined,
        OnPremiseConfiguration: output.OnPremiseConfiguration != null
            ? deserializeAws_json1_1OnPremiseConfiguration(output.OnPremiseConfiguration, context)
            : undefined,
        RepositoryFilter: output.RepositoryFilter != null
            ? deserializeAws_json1_1RepositoryNames(output.RepositoryFilter, context)
            : undefined,
        SaaSConfiguration: output.SaaSConfiguration != null
            ? deserializeAws_json1_1SaaSConfiguration(output.SaaSConfiguration, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        Type: __expectString(output.Type),
        UseChangeLog: __expectBoolean(output.UseChangeLog),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1GitHubDocumentCrawlProperties = (output, context) => {
    return {
        CrawlIssue: __expectBoolean(output.CrawlIssue),
        CrawlIssueComment: __expectBoolean(output.CrawlIssueComment),
        CrawlIssueCommentAttachment: __expectBoolean(output.CrawlIssueCommentAttachment),
        CrawlPullRequest: __expectBoolean(output.CrawlPullRequest),
        CrawlPullRequestComment: __expectBoolean(output.CrawlPullRequestComment),
        CrawlPullRequestCommentAttachment: __expectBoolean(output.CrawlPullRequestCommentAttachment),
        CrawlRepositoryDocuments: __expectBoolean(output.CrawlRepositoryDocuments),
    };
};
const deserializeAws_json1_1GoogleDriveConfiguration = (output, context) => {
    return {
        ExcludeMimeTypes: output.ExcludeMimeTypes != null
            ? deserializeAws_json1_1ExcludeMimeTypesList(output.ExcludeMimeTypes, context)
            : undefined,
        ExcludeSharedDrives: output.ExcludeSharedDrives != null
            ? deserializeAws_json1_1ExcludeSharedDrivesList(output.ExcludeSharedDrives, context)
            : undefined,
        ExcludeUserAccounts: output.ExcludeUserAccounts != null
            ? deserializeAws_json1_1ExcludeUserAccountsList(output.ExcludeUserAccounts, context)
            : undefined,
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
    };
};
const deserializeAws_json1_1GroupOrderingIdSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1GroupOrderingIdSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1GroupOrderingIdSummary = (output, context) => {
    return {
        FailureReason: __expectString(output.FailureReason),
        LastUpdatedAt: output.LastUpdatedAt != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedAt)))
            : undefined,
        OrderingId: __expectLong(output.OrderingId),
        ReceivedAt: output.ReceivedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ReceivedAt))) : undefined,
        Status: __expectString(output.Status),
    };
};
const deserializeAws_json1_1GroupSummary = (output, context) => {
    return {
        GroupId: __expectString(output.GroupId),
        OrderingId: __expectLong(output.OrderingId),
    };
};
const deserializeAws_json1_1HierarchicalPrincipal = (output, context) => {
    return {
        PrincipalList: output.PrincipalList != null ? deserializeAws_json1_1PrincipalList(output.PrincipalList, context) : undefined,
    };
};
const deserializeAws_json1_1HierarchicalPrincipalList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1HierarchicalPrincipal(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Highlight = (output, context) => {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        EndOffset: __expectInt32(output.EndOffset),
        TopAnswer: __expectBoolean(output.TopAnswer),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1HighlightList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Highlight(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1HookConfiguration = (output, context) => {
    return {
        InvocationCondition: output.InvocationCondition != null
            ? deserializeAws_json1_1DocumentAttributeCondition(output.InvocationCondition, context)
            : undefined,
        LambdaArn: __expectString(output.LambdaArn),
        S3Bucket: __expectString(output.S3Bucket),
    };
};
const deserializeAws_json1_1IndexConfigurationSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Edition: __expectString(output.Edition),
        Id: __expectString(output.Id),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1IndexConfigurationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1IndexConfigurationSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IndexStatistics = (output, context) => {
    return {
        FaqStatistics: output.FaqStatistics != null ? deserializeAws_json1_1FaqStatistics(output.FaqStatistics, context) : undefined,
        TextDocumentStatistics: output.TextDocumentStatistics != null
            ? deserializeAws_json1_1TextDocumentStatistics(output.TextDocumentStatistics, context)
            : undefined,
    };
};
const deserializeAws_json1_1InlineCustomDocumentEnrichmentConfiguration = (output, context) => {
    return {
        Condition: output.Condition != null
            ? deserializeAws_json1_1DocumentAttributeCondition(output.Condition, context)
            : undefined,
        DocumentContentDeletion: __expectBoolean(output.DocumentContentDeletion),
        Target: output.Target != null ? deserializeAws_json1_1DocumentAttributeTarget(output.Target, context) : undefined,
    };
};
const deserializeAws_json1_1InlineCustomDocumentEnrichmentConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1InlineCustomDocumentEnrichmentConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1InternalServerException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1InvalidRequestException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1IssueSubEntityFilter = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1IssueType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1JiraConfiguration = (output, context) => {
    return {
        AttachmentFieldMappings: output.AttachmentFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.AttachmentFieldMappings, context)
            : undefined,
        CommentFieldMappings: output.CommentFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.CommentFieldMappings, context)
            : undefined,
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        IssueFieldMappings: output.IssueFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.IssueFieldMappings, context)
            : undefined,
        IssueSubEntityFilter: output.IssueSubEntityFilter != null
            ? deserializeAws_json1_1IssueSubEntityFilter(output.IssueSubEntityFilter, context)
            : undefined,
        IssueType: output.IssueType != null ? deserializeAws_json1_1IssueType(output.IssueType, context) : undefined,
        JiraAccountUrl: __expectString(output.JiraAccountUrl),
        Project: output.Project != null ? deserializeAws_json1_1Project(output.Project, context) : undefined,
        ProjectFieldMappings: output.ProjectFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.ProjectFieldMappings, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        Status: output.Status != null ? deserializeAws_json1_1JiraStatus(output.Status, context) : undefined,
        UseChangeLog: __expectBoolean(output.UseChangeLog),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
        WorkLogFieldMappings: output.WorkLogFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.WorkLogFieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1JiraStatus = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1JsonTokenTypeConfiguration = (output, context) => {
    return {
        GroupAttributeField: __expectString(output.GroupAttributeField),
        UserNameAttributeField: __expectString(output.UserNameAttributeField),
    };
};
const deserializeAws_json1_1JwtTokenTypeConfiguration = (output, context) => {
    return {
        ClaimRegex: __expectString(output.ClaimRegex),
        GroupAttributeField: __expectString(output.GroupAttributeField),
        Issuer: __expectString(output.Issuer),
        KeyLocation: __expectString(output.KeyLocation),
        SecretManagerArn: __expectString(output.SecretManagerArn),
        URL: __expectString(output.URL),
        UserNameAttributeField: __expectString(output.UserNameAttributeField),
    };
};
const deserializeAws_json1_1ListAccessControlConfigurationsResponse = (output, context) => {
    return {
        AccessControlConfigurations: output.AccessControlConfigurations != null
            ? deserializeAws_json1_1AccessControlConfigurationSummaryList(output.AccessControlConfigurations, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListDataSourcesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SummaryItems: output.SummaryItems != null
            ? deserializeAws_json1_1DataSourceSummaryList(output.SummaryItems, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListDataSourceSyncJobsResponse = (output, context) => {
    return {
        History: output.History != null ? deserializeAws_json1_1DataSourceSyncJobHistoryList(output.History, context) : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListEntityPersonasResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SummaryItems: output.SummaryItems != null ? deserializeAws_json1_1PersonasSummaryList(output.SummaryItems, context) : undefined,
    };
};
const deserializeAws_json1_1ListExperienceEntitiesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SummaryItems: output.SummaryItems != null
            ? deserializeAws_json1_1ExperienceEntitiesSummaryList(output.SummaryItems, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListExperiencesResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        SummaryItems: output.SummaryItems != null
            ? deserializeAws_json1_1ExperiencesSummaryList(output.SummaryItems, context)
            : undefined,
    };
};
const deserializeAws_json1_1ListFaqsResponse = (output, context) => {
    return {
        FaqSummaryItems: output.FaqSummaryItems != null
            ? deserializeAws_json1_1FaqSummaryItems(output.FaqSummaryItems, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListGroupsOlderThanOrderingIdResponse = (output, context) => {
    return {
        GroupsSummaries: output.GroupsSummaries != null
            ? deserializeAws_json1_1ListOfGroupSummaries(output.GroupsSummaries, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListIndicesResponse = (output, context) => {
    return {
        IndexConfigurationSummaryItems: output.IndexConfigurationSummaryItems != null
            ? deserializeAws_json1_1IndexConfigurationSummaryList(output.IndexConfigurationSummaryItems, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListOfGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1GroupSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ListQuerySuggestionsBlockListsResponse = (output, context) => {
    return {
        BlockListSummaryItems: output.BlockListSummaryItems != null
            ? deserializeAws_json1_1QuerySuggestionsBlockListSummaryItems(output.BlockListSummaryItems, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context) => {
    return {
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : undefined,
    };
};
const deserializeAws_json1_1ListThesauriResponse = (output, context) => {
    return {
        NextToken: __expectString(output.NextToken),
        ThesaurusSummaryItems: output.ThesaurusSummaryItems != null
            ? deserializeAws_json1_1ThesaurusSummaryItems(output.ThesaurusSummaryItems, context)
            : undefined,
    };
};
const deserializeAws_json1_1OneDriveConfiguration = (output, context) => {
    return {
        DisableLocalGroups: __expectBoolean(output.DisableLocalGroups),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        OneDriveUsers: output.OneDriveUsers != null ? deserializeAws_json1_1OneDriveUsers(output.OneDriveUsers, context) : undefined,
        SecretArn: __expectString(output.SecretArn),
        TenantDomain: __expectString(output.TenantDomain),
    };
};
const deserializeAws_json1_1OneDriveUserList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1OneDriveUsers = (output, context) => {
    return {
        OneDriveUserList: output.OneDriveUserList != null
            ? deserializeAws_json1_1OneDriveUserList(output.OneDriveUserList, context)
            : undefined,
        OneDriveUserS3Path: output.OneDriveUserS3Path != null ? deserializeAws_json1_1S3Path(output.OneDriveUserS3Path, context) : undefined,
    };
};
const deserializeAws_json1_1OnPremiseConfiguration = (output, context) => {
    return {
        HostUrl: __expectString(output.HostUrl),
        OrganizationName: __expectString(output.OrganizationName),
        SslCertificateS3Path: output.SslCertificateS3Path != null
            ? deserializeAws_json1_1S3Path(output.SslCertificateS3Path, context)
            : undefined,
    };
};
const deserializeAws_json1_1PersonasSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        EntityId: __expectString(output.EntityId),
        Persona: __expectString(output.Persona),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1PersonasSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PersonasSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Principal = (output, context) => {
    return {
        Access: __expectString(output.Access),
        DataSourceId: __expectString(output.DataSourceId),
        Name: __expectString(output.Name),
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1PrincipalList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Principal(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1PrivateChannelFilter = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Project = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ProxyConfiguration = (output, context) => {
    return {
        Credentials: __expectString(output.Credentials),
        Host: __expectString(output.Host),
        Port: __expectInt32(output.Port),
    };
};
const deserializeAws_json1_1PublicChannelFilter = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1QueryResult = (output, context) => {
    return {
        FacetResults: output.FacetResults != null ? deserializeAws_json1_1FacetResultList(output.FacetResults, context) : undefined,
        QueryId: __expectString(output.QueryId),
        ResultItems: output.ResultItems != null ? deserializeAws_json1_1QueryResultItemList(output.ResultItems, context) : undefined,
        SpellCorrectedQueries: output.SpellCorrectedQueries != null
            ? deserializeAws_json1_1SpellCorrectedQueryList(output.SpellCorrectedQueries, context)
            : undefined,
        TotalNumberOfResults: __expectInt32(output.TotalNumberOfResults),
        Warnings: output.Warnings != null ? deserializeAws_json1_1WarningList(output.Warnings, context) : undefined,
    };
};
const deserializeAws_json1_1QueryResultItem = (output, context) => {
    return {
        AdditionalAttributes: output.AdditionalAttributes != null
            ? deserializeAws_json1_1AdditionalResultAttributeList(output.AdditionalAttributes, context)
            : undefined,
        DocumentAttributes: output.DocumentAttributes != null
            ? deserializeAws_json1_1DocumentAttributeList(output.DocumentAttributes, context)
            : undefined,
        DocumentExcerpt: output.DocumentExcerpt != null
            ? deserializeAws_json1_1TextWithHighlights(output.DocumentExcerpt, context)
            : undefined,
        DocumentId: __expectString(output.DocumentId),
        DocumentTitle: output.DocumentTitle != null
            ? deserializeAws_json1_1TextWithHighlights(output.DocumentTitle, context)
            : undefined,
        DocumentURI: __expectString(output.DocumentURI),
        FeedbackToken: __expectString(output.FeedbackToken),
        Format: __expectString(output.Format),
        Id: __expectString(output.Id),
        ScoreAttributes: output.ScoreAttributes != null
            ? deserializeAws_json1_1ScoreAttributes(output.ScoreAttributes, context)
            : undefined,
        TableExcerpt: output.TableExcerpt != null ? deserializeAws_json1_1TableExcerpt(output.TableExcerpt, context) : undefined,
        Type: __expectString(output.Type),
    };
};
const deserializeAws_json1_1QueryResultItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1QueryResultItem(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1QuerySuggestionsBlockListSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Id: __expectString(output.Id),
        ItemCount: __expectInt32(output.ItemCount),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1QuerySuggestionsBlockListSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1QuerySuggestionsBlockListSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1QuipConfiguration = (output, context) => {
    return {
        AttachmentFieldMappings: output.AttachmentFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.AttachmentFieldMappings, context)
            : undefined,
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
        CrawlChatRooms: __expectBoolean(output.CrawlChatRooms),
        CrawlFileComments: __expectBoolean(output.CrawlFileComments),
        Domain: __expectString(output.Domain),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FolderIds: output.FolderIds != null ? deserializeAws_json1_1FolderIdList(output.FolderIds, context) : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        MessageFieldMappings: output.MessageFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.MessageFieldMappings, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        ThreadFieldMappings: output.ThreadFieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.ThreadFieldMappings, context)
            : undefined,
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1Relevance = (output, context) => {
    return {
        Duration: __expectString(output.Duration),
        Freshness: __expectBoolean(output.Freshness),
        Importance: __expectInt32(output.Importance),
        RankOrder: __expectString(output.RankOrder),
        ValueImportanceMap: output.ValueImportanceMap != null
            ? deserializeAws_json1_1ValueImportanceMap(output.ValueImportanceMap, context)
            : undefined,
    };
};
const deserializeAws_json1_1RepositoryNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceAlreadyExistException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceInUseException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ResourceUnavailableException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1S3DataSourceConfiguration = (output, context) => {
    return {
        AccessControlListConfiguration: output.AccessControlListConfiguration != null
            ? deserializeAws_json1_1AccessControlListConfiguration(output.AccessControlListConfiguration, context)
            : undefined,
        BucketName: __expectString(output.BucketName),
        DocumentsMetadataConfiguration: output.DocumentsMetadataConfiguration != null
            ? deserializeAws_json1_1DocumentsMetadataConfiguration(output.DocumentsMetadataConfiguration, context)
            : undefined,
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        InclusionPrefixes: output.InclusionPrefixes != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPrefixes, context)
            : undefined,
    };
};
const deserializeAws_json1_1S3Path = (output, context) => {
    return {
        Bucket: __expectString(output.Bucket),
        Key: __expectString(output.Key),
    };
};
const deserializeAws_json1_1SaaSConfiguration = (output, context) => {
    return {
        HostUrl: __expectString(output.HostUrl),
        OrganizationName: __expectString(output.OrganizationName),
    };
};
const deserializeAws_json1_1SalesforceChatterFeedConfiguration = (output, context) => {
    return {
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        IncludeFilterTypes: output.IncludeFilterTypes != null
            ? deserializeAws_json1_1SalesforceChatterFeedIncludeFilterTypes(output.IncludeFilterTypes, context)
            : undefined,
    };
};
const deserializeAws_json1_1SalesforceChatterFeedIncludeFilterTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SalesforceConfiguration = (output, context) => {
    return {
        ChatterFeedConfiguration: output.ChatterFeedConfiguration != null
            ? deserializeAws_json1_1SalesforceChatterFeedConfiguration(output.ChatterFeedConfiguration, context)
            : undefined,
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
        ExcludeAttachmentFilePatterns: output.ExcludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExcludeAttachmentFilePatterns, context)
            : undefined,
        IncludeAttachmentFilePatterns: output.IncludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.IncludeAttachmentFilePatterns, context)
            : undefined,
        KnowledgeArticleConfiguration: output.KnowledgeArticleConfiguration != null
            ? deserializeAws_json1_1SalesforceKnowledgeArticleConfiguration(output.KnowledgeArticleConfiguration, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        ServerUrl: __expectString(output.ServerUrl),
        StandardObjectAttachmentConfiguration: output.StandardObjectAttachmentConfiguration != null
            ? deserializeAws_json1_1SalesforceStandardObjectAttachmentConfiguration(output.StandardObjectAttachmentConfiguration, context)
            : undefined,
        StandardObjectConfigurations: output.StandardObjectConfigurations != null
            ? deserializeAws_json1_1SalesforceStandardObjectConfigurationList(output.StandardObjectConfigurations, context)
            : undefined,
    };
};
const deserializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfiguration = (output, context) => {
    return {
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SalesforceKnowledgeArticleConfiguration = (output, context) => {
    return {
        CustomKnowledgeArticleTypeConfigurations: output.CustomKnowledgeArticleTypeConfigurations != null
            ? deserializeAws_json1_1SalesforceCustomKnowledgeArticleTypeConfigurationList(output.CustomKnowledgeArticleTypeConfigurations, context)
            : undefined,
        IncludedStates: output.IncludedStates != null
            ? deserializeAws_json1_1SalesforceKnowledgeArticleStateList(output.IncludedStates, context)
            : undefined,
        StandardKnowledgeArticleTypeConfiguration: output.StandardKnowledgeArticleTypeConfiguration != null
            ? deserializeAws_json1_1SalesforceStandardKnowledgeArticleTypeConfiguration(output.StandardKnowledgeArticleTypeConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1SalesforceKnowledgeArticleStateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SalesforceStandardKnowledgeArticleTypeConfiguration = (output, context) => {
    return {
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1SalesforceStandardObjectAttachmentConfiguration = (output, context) => {
    return {
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
    };
};
const deserializeAws_json1_1SalesforceStandardObjectConfiguration = (output, context) => {
    return {
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        Name: __expectString(output.Name),
    };
};
const deserializeAws_json1_1SalesforceStandardObjectConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SalesforceStandardObjectConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ScoreAttributes = (output, context) => {
    return {
        ScoreConfidence: __expectString(output.ScoreConfidence),
    };
};
const deserializeAws_json1_1Search = (output, context) => {
    return {
        Displayable: __expectBoolean(output.Displayable),
        Facetable: __expectBoolean(output.Facetable),
        Searchable: __expectBoolean(output.Searchable),
        Sortable: __expectBoolean(output.Sortable),
    };
};
const deserializeAws_json1_1SecurityGroupIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SeedUrlConfiguration = (output, context) => {
    return {
        SeedUrls: output.SeedUrls != null ? deserializeAws_json1_1SeedUrlList(output.SeedUrls, context) : undefined,
        WebCrawlerMode: __expectString(output.WebCrawlerMode),
    };
};
const deserializeAws_json1_1SeedUrlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ServerSideEncryptionConfiguration = (output, context) => {
    return {
        KmsKeyId: __expectString(output.KmsKeyId),
    };
};
const deserializeAws_json1_1ServiceNowConfiguration = (output, context) => {
    return {
        AuthenticationType: __expectString(output.AuthenticationType),
        HostUrl: __expectString(output.HostUrl),
        KnowledgeArticleConfiguration: output.KnowledgeArticleConfiguration != null
            ? deserializeAws_json1_1ServiceNowKnowledgeArticleConfiguration(output.KnowledgeArticleConfiguration, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        ServiceCatalogConfiguration: output.ServiceCatalogConfiguration != null
            ? deserializeAws_json1_1ServiceNowServiceCatalogConfiguration(output.ServiceCatalogConfiguration, context)
            : undefined,
        ServiceNowBuildVersion: __expectString(output.ServiceNowBuildVersion),
    };
};
const deserializeAws_json1_1ServiceNowKnowledgeArticleConfiguration = (output, context) => {
    return {
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        ExcludeAttachmentFilePatterns: output.ExcludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExcludeAttachmentFilePatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        FilterQuery: __expectString(output.FilterQuery),
        IncludeAttachmentFilePatterns: output.IncludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.IncludeAttachmentFilePatterns, context)
            : undefined,
    };
};
const deserializeAws_json1_1ServiceNowServiceCatalogConfiguration = (output, context) => {
    return {
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
        DocumentDataFieldName: __expectString(output.DocumentDataFieldName),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        ExcludeAttachmentFilePatterns: output.ExcludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExcludeAttachmentFilePatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        IncludeAttachmentFilePatterns: output.IncludeAttachmentFilePatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.IncludeAttachmentFilePatterns, context)
            : undefined,
    };
};
const deserializeAws_json1_1ServiceQuotaExceededException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1SharePointConfiguration = (output, context) => {
    return {
        AuthenticationType: __expectString(output.AuthenticationType),
        CrawlAttachments: __expectBoolean(output.CrawlAttachments),
        DisableLocalGroups: __expectBoolean(output.DisableLocalGroups),
        DocumentTitleFieldName: __expectString(output.DocumentTitleFieldName),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        ProxyConfiguration: output.ProxyConfiguration != null
            ? deserializeAws_json1_1ProxyConfiguration(output.ProxyConfiguration, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        SharePointVersion: __expectString(output.SharePointVersion),
        SslCertificateS3Path: output.SslCertificateS3Path != null
            ? deserializeAws_json1_1S3Path(output.SslCertificateS3Path, context)
            : undefined,
        Urls: output.Urls != null ? deserializeAws_json1_1SharePointUrlList(output.Urls, context) : undefined,
        UseChangeLog: __expectBoolean(output.UseChangeLog),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1SharePointUrlList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SiteMapsConfiguration = (output, context) => {
    return {
        SiteMaps: output.SiteMaps != null ? deserializeAws_json1_1SiteMapsList(output.SiteMaps, context) : undefined,
    };
};
const deserializeAws_json1_1SiteMapsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SlackConfiguration = (output, context) => {
    return {
        CrawlBotMessage: __expectBoolean(output.CrawlBotMessage),
        ExcludeArchived: __expectBoolean(output.ExcludeArchived),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        LookBackPeriod: __expectInt32(output.LookBackPeriod),
        PrivateChannelFilter: output.PrivateChannelFilter != null
            ? deserializeAws_json1_1PrivateChannelFilter(output.PrivateChannelFilter, context)
            : undefined,
        PublicChannelFilter: output.PublicChannelFilter != null
            ? deserializeAws_json1_1PublicChannelFilter(output.PublicChannelFilter, context)
            : undefined,
        SecretArn: __expectString(output.SecretArn),
        SinceCrawlDate: __expectString(output.SinceCrawlDate),
        SlackEntityList: output.SlackEntityList != null
            ? deserializeAws_json1_1SlackEntityList(output.SlackEntityList, context)
            : undefined,
        TeamId: __expectString(output.TeamId),
        UseChangeLog: __expectBoolean(output.UseChangeLog),
        VpcConfiguration: output.VpcConfiguration != null
            ? deserializeAws_json1_1DataSourceVpcConfiguration(output.VpcConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1SlackEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SnapshotsDataHeaderFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SnapshotsDataRecord = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SnapshotsDataRecords = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SnapshotsDataRecord(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SpellCorrectedQuery = (output, context) => {
    return {
        Corrections: output.Corrections != null ? deserializeAws_json1_1CorrectionList(output.Corrections, context) : undefined,
        SuggestedQueryText: __expectString(output.SuggestedQueryText),
    };
};
const deserializeAws_json1_1SpellCorrectedQueryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SpellCorrectedQuery(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SqlConfiguration = (output, context) => {
    return {
        QueryIdentifiersEnclosingOption: __expectString(output.QueryIdentifiersEnclosingOption),
    };
};
const deserializeAws_json1_1StartDataSourceSyncJobResponse = (output, context) => {
    return {
        ExecutionId: __expectString(output.ExecutionId),
    };
};
const deserializeAws_json1_1Status = (output, context) => {
    return {
        DocumentId: __expectString(output.DocumentId),
        DocumentStatus: __expectString(output.DocumentStatus),
        FailureCode: __expectString(output.FailureCode),
        FailureReason: __expectString(output.FailureReason),
    };
};
const deserializeAws_json1_1StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SubnetIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Suggestion = (output, context) => {
    return {
        Id: __expectString(output.Id),
        Value: output.Value != null ? deserializeAws_json1_1SuggestionValue(output.Value, context) : undefined,
    };
};
const deserializeAws_json1_1SuggestionHighlight = (output, context) => {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        EndOffset: __expectInt32(output.EndOffset),
    };
};
const deserializeAws_json1_1SuggestionHighlightList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SuggestionHighlight(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SuggestionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Suggestion(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SuggestionTextWithHighlights = (output, context) => {
    return {
        Highlights: output.Highlights != null ? deserializeAws_json1_1SuggestionHighlightList(output.Highlights, context) : undefined,
        Text: __expectString(output.Text),
    };
};
const deserializeAws_json1_1SuggestionValue = (output, context) => {
    return {
        Text: output.Text != null ? deserializeAws_json1_1SuggestionTextWithHighlights(output.Text, context) : undefined,
    };
};
const deserializeAws_json1_1TableCell = (output, context) => {
    return {
        Header: __expectBoolean(output.Header),
        Highlighted: __expectBoolean(output.Highlighted),
        TopAnswer: __expectBoolean(output.TopAnswer),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1TableCellList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TableCell(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TableExcerpt = (output, context) => {
    return {
        Rows: output.Rows != null ? deserializeAws_json1_1TableRowList(output.Rows, context) : undefined,
        TotalNumberOfRows: __expectInt32(output.TotalNumberOfRows),
    };
};
const deserializeAws_json1_1TableRow = (output, context) => {
    return {
        Cells: output.Cells != null ? deserializeAws_json1_1TableCellList(output.Cells, context) : undefined,
    };
};
const deserializeAws_json1_1TableRowList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TableRow(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Template = (output, context) => {
    return output;
};
const deserializeAws_json1_1TemplateConfiguration = (output, context) => {
    return {
        Template: output.Template != null ? deserializeAws_json1_1Template(output.Template, context) : undefined,
    };
};
const deserializeAws_json1_1TextDocumentStatistics = (output, context) => {
    return {
        IndexedTextBytes: __expectLong(output.IndexedTextBytes),
        IndexedTextDocumentsCount: __expectInt32(output.IndexedTextDocumentsCount),
    };
};
const deserializeAws_json1_1TextWithHighlights = (output, context) => {
    return {
        Highlights: output.Highlights != null ? deserializeAws_json1_1HighlightList(output.Highlights, context) : undefined,
        Text: __expectString(output.Text),
    };
};
const deserializeAws_json1_1ThesaurusSummary = (output, context) => {
    return {
        CreatedAt: output.CreatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedAt))) : undefined,
        Id: __expectString(output.Id),
        Name: __expectString(output.Name),
        Status: __expectString(output.Status),
        UpdatedAt: output.UpdatedAt != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.UpdatedAt))) : undefined,
    };
};
const deserializeAws_json1_1ThesaurusSummaryItems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ThesaurusSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ThrottlingException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1TimeRange = (output, context) => {
    return {
        EndTime: output.EndTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EndTime))) : undefined,
        StartTime: output.StartTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartTime))) : undefined,
    };
};
const deserializeAws_json1_1UntagResourceResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1UpdateAccessControlConfigurationResponse = (output, context) => {
    return {};
};
const deserializeAws_json1_1Urls = (output, context) => {
    return {
        SeedUrlConfiguration: output.SeedUrlConfiguration != null
            ? deserializeAws_json1_1SeedUrlConfiguration(output.SeedUrlConfiguration, context)
            : undefined,
        SiteMapsConfiguration: output.SiteMapsConfiguration != null
            ? deserializeAws_json1_1SiteMapsConfiguration(output.SiteMapsConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1UserGroupResolutionConfiguration = (output, context) => {
    return {
        UserGroupResolutionMode: __expectString(output.UserGroupResolutionMode),
    };
};
const deserializeAws_json1_1UserIdentityConfiguration = (output, context) => {
    return {
        IdentityAttributeName: __expectString(output.IdentityAttributeName),
    };
};
const deserializeAws_json1_1UserTokenConfiguration = (output, context) => {
    return {
        JsonTokenTypeConfiguration: output.JsonTokenTypeConfiguration != null
            ? deserializeAws_json1_1JsonTokenTypeConfiguration(output.JsonTokenTypeConfiguration, context)
            : undefined,
        JwtTokenTypeConfiguration: output.JwtTokenTypeConfiguration != null
            ? deserializeAws_json1_1JwtTokenTypeConfiguration(output.JwtTokenTypeConfiguration, context)
            : undefined,
    };
};
const deserializeAws_json1_1UserTokenConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UserTokenConfiguration(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1ValueImportanceMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __expectInt32(value);
        return acc;
    }, {});
};
const deserializeAws_json1_1Warning = (output, context) => {
    return {
        Code: __expectString(output.Code),
        Message: __expectString(output.Message),
    };
};
const deserializeAws_json1_1WarningList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Warning(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1WebCrawlerConfiguration = (output, context) => {
    return {
        AuthenticationConfiguration: output.AuthenticationConfiguration != null
            ? deserializeAws_json1_1AuthenticationConfiguration(output.AuthenticationConfiguration, context)
            : undefined,
        CrawlDepth: __expectInt32(output.CrawlDepth),
        MaxContentSizePerPageInMegaBytes: __limitedParseFloat32(output.MaxContentSizePerPageInMegaBytes),
        MaxLinksPerPage: __expectInt32(output.MaxLinksPerPage),
        MaxUrlsPerMinuteCrawlRate: __expectInt32(output.MaxUrlsPerMinuteCrawlRate),
        ProxyConfiguration: output.ProxyConfiguration != null
            ? deserializeAws_json1_1ProxyConfiguration(output.ProxyConfiguration, context)
            : undefined,
        UrlExclusionPatterns: output.UrlExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.UrlExclusionPatterns, context)
            : undefined,
        UrlInclusionPatterns: output.UrlInclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.UrlInclusionPatterns, context)
            : undefined,
        Urls: output.Urls != null ? deserializeAws_json1_1Urls(output.Urls, context) : undefined,
    };
};
const deserializeAws_json1_1WorkDocsConfiguration = (output, context) => {
    return {
        CrawlComments: __expectBoolean(output.CrawlComments),
        ExclusionPatterns: output.ExclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.ExclusionPatterns, context)
            : undefined,
        FieldMappings: output.FieldMappings != null
            ? deserializeAws_json1_1DataSourceToIndexFieldMappingList(output.FieldMappings, context)
            : undefined,
        InclusionPatterns: output.InclusionPatterns != null
            ? deserializeAws_json1_1DataSourceInclusionsExclusionsStrings(output.InclusionPatterns, context)
            : undefined,
        OrganizationId: __expectString(output.OrganizationId),
        UseChangeLog: __expectBoolean(output.UseChangeLog),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
