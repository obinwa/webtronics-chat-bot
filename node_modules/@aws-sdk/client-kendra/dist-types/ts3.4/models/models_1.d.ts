import {
  DocumentAttribute,
  DocumentAttributeValue,
  DocumentAttributeValueType,
  DocumentRelevanceConfiguration,
  Mode,
  QueryResultItem,
  QueryResultType,
  S3Path,
  SortingConfiguration,
  SpellCorrectedQuery,
  SpellCorrectionConfiguration,
  UserContext,
  Warning,
} from "./models_0";
export interface UpdateQuerySuggestionsConfigRequest {
  IndexId: string | undefined;
  Mode?: Mode | string;
  QueryLogLookBackWindowInDays?: number;
  IncludeQueriesWithoutUserInformation?: boolean;
  MinimumNumberOfQueryingUsers?: number;
  MinimumQueryCount?: number;
}
export interface UpdateThesaurusRequest {
  Id: string | undefined;
  Name?: string;
  IndexId: string | undefined;
  Description?: string;
  RoleArn?: string;
  SourceS3Path?: S3Path;
}
export interface Facet {
  DocumentAttributeKey?: string;
  Facets?: Facet[];
  MaxResults?: number;
}
export interface DocumentAttributeValueCountPair {
  DocumentAttributeValue?: DocumentAttributeValue;
  Count?: number;
  FacetResults?: FacetResult[];
}
export interface FacetResult {
  DocumentAttributeKey?: string;
  DocumentAttributeValueType?: DocumentAttributeValueType | string;
  DocumentAttributeValueCountPairs?: DocumentAttributeValueCountPair[];
}
export interface AttributeFilter {
  AndAllFilters?: AttributeFilter[];
  OrAllFilters?: AttributeFilter[];
  NotFilter?: AttributeFilter;
  EqualsTo?: DocumentAttribute;
  ContainsAll?: DocumentAttribute;
  ContainsAny?: DocumentAttribute;
  GreaterThan?: DocumentAttribute;
  GreaterThanOrEquals?: DocumentAttribute;
  LessThan?: DocumentAttribute;
  LessThanOrEquals?: DocumentAttribute;
}
export interface QueryResult {
  QueryId?: string;
  ResultItems?: QueryResultItem[];
  FacetResults?: FacetResult[];
  TotalNumberOfResults?: number;
  Warnings?: Warning[];
  SpellCorrectedQueries?: SpellCorrectedQuery[];
}
export interface QueryRequest {
  IndexId: string | undefined;
  QueryText?: string;
  AttributeFilter?: AttributeFilter;
  Facets?: Facet[];
  RequestedDocumentAttributes?: string[];
  QueryResultTypeFilter?: QueryResultType | string;
  DocumentRelevanceOverrideConfigurations?: DocumentRelevanceConfiguration[];
  PageNumber?: number;
  PageSize?: number;
  SortingConfiguration?: SortingConfiguration;
  UserContext?: UserContext;
  VisitorId?: string;
  SpellCorrectionConfiguration?: SpellCorrectionConfiguration;
}
export declare const UpdateQuerySuggestionsConfigRequestFilterSensitiveLog: (
  obj: UpdateQuerySuggestionsConfigRequest
) => any;
export declare const UpdateThesaurusRequestFilterSensitiveLog: (
  obj: UpdateThesaurusRequest
) => any;
export declare const FacetFilterSensitiveLog: (obj: Facet) => any;
export declare const DocumentAttributeValueCountPairFilterSensitiveLog: (
  obj: DocumentAttributeValueCountPair
) => any;
export declare const FacetResultFilterSensitiveLog: (obj: FacetResult) => any;
export declare const AttributeFilterFilterSensitiveLog: (
  obj: AttributeFilter
) => any;
export declare const QueryResultFilterSensitiveLog: (obj: QueryResult) => any;
export declare const QueryRequestFilterSensitiveLog: (obj: QueryRequest) => any;
