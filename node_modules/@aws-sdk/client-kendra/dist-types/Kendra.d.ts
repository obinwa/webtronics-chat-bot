import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
import { AssociateEntitiesToExperienceCommandInput, AssociateEntitiesToExperienceCommandOutput } from "./commands/AssociateEntitiesToExperienceCommand";
import { AssociatePersonasToEntitiesCommandInput, AssociatePersonasToEntitiesCommandOutput } from "./commands/AssociatePersonasToEntitiesCommand";
import { BatchDeleteDocumentCommandInput, BatchDeleteDocumentCommandOutput } from "./commands/BatchDeleteDocumentCommand";
import { BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput } from "./commands/BatchGetDocumentStatusCommand";
import { BatchPutDocumentCommandInput, BatchPutDocumentCommandOutput } from "./commands/BatchPutDocumentCommand";
import { ClearQuerySuggestionsCommandInput, ClearQuerySuggestionsCommandOutput } from "./commands/ClearQuerySuggestionsCommand";
import { CreateAccessControlConfigurationCommandInput, CreateAccessControlConfigurationCommandOutput } from "./commands/CreateAccessControlConfigurationCommand";
import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "./commands/CreateDataSourceCommand";
import { CreateExperienceCommandInput, CreateExperienceCommandOutput } from "./commands/CreateExperienceCommand";
import { CreateFaqCommandInput, CreateFaqCommandOutput } from "./commands/CreateFaqCommand";
import { CreateIndexCommandInput, CreateIndexCommandOutput } from "./commands/CreateIndexCommand";
import { CreateQuerySuggestionsBlockListCommandInput, CreateQuerySuggestionsBlockListCommandOutput } from "./commands/CreateQuerySuggestionsBlockListCommand";
import { CreateThesaurusCommandInput, CreateThesaurusCommandOutput } from "./commands/CreateThesaurusCommand";
import { DeleteAccessControlConfigurationCommandInput, DeleteAccessControlConfigurationCommandOutput } from "./commands/DeleteAccessControlConfigurationCommand";
import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "./commands/DeleteDataSourceCommand";
import { DeleteExperienceCommandInput, DeleteExperienceCommandOutput } from "./commands/DeleteExperienceCommand";
import { DeleteFaqCommandInput, DeleteFaqCommandOutput } from "./commands/DeleteFaqCommand";
import { DeleteIndexCommandInput, DeleteIndexCommandOutput } from "./commands/DeleteIndexCommand";
import { DeletePrincipalMappingCommandInput, DeletePrincipalMappingCommandOutput } from "./commands/DeletePrincipalMappingCommand";
import { DeleteQuerySuggestionsBlockListCommandInput, DeleteQuerySuggestionsBlockListCommandOutput } from "./commands/DeleteQuerySuggestionsBlockListCommand";
import { DeleteThesaurusCommandInput, DeleteThesaurusCommandOutput } from "./commands/DeleteThesaurusCommand";
import { DescribeAccessControlConfigurationCommandInput, DescribeAccessControlConfigurationCommandOutput } from "./commands/DescribeAccessControlConfigurationCommand";
import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "./commands/DescribeDataSourceCommand";
import { DescribeExperienceCommandInput, DescribeExperienceCommandOutput } from "./commands/DescribeExperienceCommand";
import { DescribeFaqCommandInput, DescribeFaqCommandOutput } from "./commands/DescribeFaqCommand";
import { DescribeIndexCommandInput, DescribeIndexCommandOutput } from "./commands/DescribeIndexCommand";
import { DescribePrincipalMappingCommandInput, DescribePrincipalMappingCommandOutput } from "./commands/DescribePrincipalMappingCommand";
import { DescribeQuerySuggestionsBlockListCommandInput, DescribeQuerySuggestionsBlockListCommandOutput } from "./commands/DescribeQuerySuggestionsBlockListCommand";
import { DescribeQuerySuggestionsConfigCommandInput, DescribeQuerySuggestionsConfigCommandOutput } from "./commands/DescribeQuerySuggestionsConfigCommand";
import { DescribeThesaurusCommandInput, DescribeThesaurusCommandOutput } from "./commands/DescribeThesaurusCommand";
import { DisassociateEntitiesFromExperienceCommandInput, DisassociateEntitiesFromExperienceCommandOutput } from "./commands/DisassociateEntitiesFromExperienceCommand";
import { DisassociatePersonasFromEntitiesCommandInput, DisassociatePersonasFromEntitiesCommandOutput } from "./commands/DisassociatePersonasFromEntitiesCommand";
import { GetQuerySuggestionsCommandInput, GetQuerySuggestionsCommandOutput } from "./commands/GetQuerySuggestionsCommand";
import { GetSnapshotsCommandInput, GetSnapshotsCommandOutput } from "./commands/GetSnapshotsCommand";
import { ListAccessControlConfigurationsCommandInput, ListAccessControlConfigurationsCommandOutput } from "./commands/ListAccessControlConfigurationsCommand";
import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "./commands/ListDataSourcesCommand";
import { ListDataSourceSyncJobsCommandInput, ListDataSourceSyncJobsCommandOutput } from "./commands/ListDataSourceSyncJobsCommand";
import { ListEntityPersonasCommandInput, ListEntityPersonasCommandOutput } from "./commands/ListEntityPersonasCommand";
import { ListExperienceEntitiesCommandInput, ListExperienceEntitiesCommandOutput } from "./commands/ListExperienceEntitiesCommand";
import { ListExperiencesCommandInput, ListExperiencesCommandOutput } from "./commands/ListExperiencesCommand";
import { ListFaqsCommandInput, ListFaqsCommandOutput } from "./commands/ListFaqsCommand";
import { ListGroupsOlderThanOrderingIdCommandInput, ListGroupsOlderThanOrderingIdCommandOutput } from "./commands/ListGroupsOlderThanOrderingIdCommand";
import { ListIndicesCommandInput, ListIndicesCommandOutput } from "./commands/ListIndicesCommand";
import { ListQuerySuggestionsBlockListsCommandInput, ListQuerySuggestionsBlockListsCommandOutput } from "./commands/ListQuerySuggestionsBlockListsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListThesauriCommandInput, ListThesauriCommandOutput } from "./commands/ListThesauriCommand";
import { PutPrincipalMappingCommandInput, PutPrincipalMappingCommandOutput } from "./commands/PutPrincipalMappingCommand";
import { QueryCommandInput, QueryCommandOutput } from "./commands/QueryCommand";
import { StartDataSourceSyncJobCommandInput, StartDataSourceSyncJobCommandOutput } from "./commands/StartDataSourceSyncJobCommand";
import { StopDataSourceSyncJobCommandInput, StopDataSourceSyncJobCommandOutput } from "./commands/StopDataSourceSyncJobCommand";
import { SubmitFeedbackCommandInput, SubmitFeedbackCommandOutput } from "./commands/SubmitFeedbackCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateAccessControlConfigurationCommandInput, UpdateAccessControlConfigurationCommandOutput } from "./commands/UpdateAccessControlConfigurationCommand";
import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "./commands/UpdateDataSourceCommand";
import { UpdateExperienceCommandInput, UpdateExperienceCommandOutput } from "./commands/UpdateExperienceCommand";
import { UpdateIndexCommandInput, UpdateIndexCommandOutput } from "./commands/UpdateIndexCommand";
import { UpdateQuerySuggestionsBlockListCommandInput, UpdateQuerySuggestionsBlockListCommandOutput } from "./commands/UpdateQuerySuggestionsBlockListCommand";
import { UpdateQuerySuggestionsConfigCommandInput, UpdateQuerySuggestionsConfigCommandOutput } from "./commands/UpdateQuerySuggestionsConfigCommand";
import { UpdateThesaurusCommandInput, UpdateThesaurusCommandOutput } from "./commands/UpdateThesaurusCommand";
import { KendraClient } from "./KendraClient";
/**
 * <p>Amazon Kendra is a service for indexing large document sets.</p>
 */
export declare class Kendra extends KendraClient {
    /**
     * <p>Grants users or groups in your IAM Identity Center identity source access
     *             to your Amazon Kendra experience. You can create an Amazon Kendra experience such as a
     *             search application. For more information on creating a search application
     *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
     *                 a search experience with no code</a>.</p>
     */
    associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, options?: __HttpHandlerOptions): Promise<AssociateEntitiesToExperienceCommandOutput>;
    associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, cb: (err: any, data?: AssociateEntitiesToExperienceCommandOutput) => void): void;
    associateEntitiesToExperience(args: AssociateEntitiesToExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateEntitiesToExperienceCommandOutput) => void): void;
    /**
     * <p>Defines the specific permissions of users or groups in your IAM Identity Center
     *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
     *             experience such as a search application. For more information on creating a
     *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
     *                 a search experience with no code</a>.</p>
     */
    associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<AssociatePersonasToEntitiesCommandOutput>;
    associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, cb: (err: any, data?: AssociatePersonasToEntitiesCommandOutput) => void): void;
    associatePersonasToEntities(args: AssociatePersonasToEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociatePersonasToEntitiesCommandOutput) => void): void;
    /**
     * <p>Removes one or more documents from an index. The documents must have
     *       been added with the <code>BatchPutDocument</code> API.</p>
     *          <p>The documents are deleted asynchronously. You can see the progress of
     *       the deletion by using Amazon Web Services CloudWatch. Any error messages related to the
     *       processing of the batch are sent to you CloudWatch log.</p>
     */
    batchDeleteDocument(args: BatchDeleteDocumentCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteDocumentCommandOutput>;
    batchDeleteDocument(args: BatchDeleteDocumentCommandInput, cb: (err: any, data?: BatchDeleteDocumentCommandOutput) => void): void;
    batchDeleteDocument(args: BatchDeleteDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteDocumentCommandOutput) => void): void;
    /**
     * <p>Returns the indexing status for one or more documents submitted
     *             with the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">
     *                 BatchPutDocument</a> API.</p>
     *          <p>When you use the <code>BatchPutDocument</code> API,
     *             documents are indexed asynchronously. You can use the
     *                 <code>BatchGetDocumentStatus</code> API to get the current
     *             status of a list of documents so that you can determine if they have
     *             been successfully indexed.</p>
     *          <p>You can also use the <code>BatchGetDocumentStatus</code> API
     *             to check the status of the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html">
     *                 BatchDeleteDocument</a> API. When a document is
     *             deleted from the index, Amazon Kendra returns <code>NOT_FOUND</code> as the
     *             status.</p>
     */
    batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetDocumentStatusCommandOutput>;
    batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, cb: (err: any, data?: BatchGetDocumentStatusCommandOutput) => void): void;
    batchGetDocumentStatus(args: BatchGetDocumentStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetDocumentStatusCommandOutput) => void): void;
    /**
     * <p>Adds one or more documents to an index.</p>
     *          <p>The <code>BatchPutDocument</code> API enables you to ingest
     *       inline documents or a set of documents stored in an Amazon S3 bucket. Use
     *       this API to ingest your text and unstructured text into an index,
     *       add custom attributes to the documents, and to attach an access control
     *       list to the documents added to the index.</p>
     *          <p>The documents are indexed asynchronously. You can see the progress of
     *       the batch using Amazon Web Services CloudWatch. Any error messages related to processing
     *       the batch are sent to your Amazon Web Services CloudWatch log.</p>
     *          <p>For an example of ingesting inline documents using Python and Java SDKs,
     *       see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html">Adding
     *         files directly to an index</a>.</p>
     */
    batchPutDocument(args: BatchPutDocumentCommandInput, options?: __HttpHandlerOptions): Promise<BatchPutDocumentCommandOutput>;
    batchPutDocument(args: BatchPutDocumentCommandInput, cb: (err: any, data?: BatchPutDocumentCommandOutput) => void): void;
    batchPutDocument(args: BatchPutDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchPutDocumentCommandOutput) => void): void;
    /**
     * <p>Clears existing query suggestions from an index.</p>
     *          <p>This deletes existing suggestions only, not the queries
     *             in the query log. After you clear suggestions, Amazon Kendra learns
     *             new suggestions based on new queries added to the query log
     *             from the time you cleared suggestions. If you do not see any
     *             new suggestions, then please allow Amazon Kendra to collect
     *             enough queries to learn new suggestions.</p>
     *          <p>
     *             <code>ClearQuerySuggestions</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<ClearQuerySuggestionsCommandOutput>;
    clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, cb: (err: any, data?: ClearQuerySuggestionsCommandOutput) => void): void;
    clearQuerySuggestions(args: ClearQuerySuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ClearQuerySuggestionsCommandOutput) => void): void;
    /**
     * <p>Creates an access configuration for your documents. This includes
     *             user and group access information for your documents. This is useful
     *             for user context filtering, where search results are filtered based
     *             on the user or their group access to documents.</p>
     *          <p>You can use this to re-configure your existing document level access control without
     *             indexing all of your documents again. For example, your index contains top-secret
     *             company documents that only certain employees or users should access. One of these users
     *             leaves the company or switches to a team that should be blocked from accessing
     *             top-secret documents. The user still has access to top-secret documents because the user
     *             had access when your documents were previously indexed. You
     *             can create a specific access control configuration for the user with deny
     *             access. You can later update the access control configuration to allow access if the
     *             user returns to the company and re-joins the 'top-secret' team. You can re-configure
     *             access control for your documents as circumstances change.</p>
     *          <p>To apply your access control configuration to certain documents, you call
     *             the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a>
     *             API with the <code>AccessControlConfigurationId</code> included in the
     *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
     *             object. If you use an S3 bucket as a data source, you update the
     *             <code>.metadata.json</code> with the <code>AccessControlConfigurationId</code>
     *             and synchronize your data source. Amazon Kendra currently only supports
     *             access control configuration for S3 data sources and documents indexed using the
     *             <code>BatchPutDocument</code> API.</p>
     */
    createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccessControlConfigurationCommandOutput>;
    createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, cb: (err: any, data?: CreateAccessControlConfigurationCommandOutput) => void): void;
    createAccessControlConfiguration(args: CreateAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccessControlConfigurationCommandOutput) => void): void;
    /**
     * <p>Creates a data source connector that you want to use with an Amazon Kendra
     *       index.</p>
     *          <p>You specify a name, data source connector type and description for your data source. You
     *       also specify configuration information for the data source connector.</p>
     *          <p>
     *             <code>CreateDataSource</code> is a synchronous operation. The operation returns 200 if the
     *       data source was successfully created. Otherwise, an exception is raised.</p>
     *          <p>Amazon S3 and <a href="https://docs.aws.amazon.com/kendra/latest/dg/data-source-custom.html">custom</a> data sources are the only
     *       supported data sources in the Amazon Web Services GovCloud (US-West) region.</p>
     *          <p>For an example of creating an index and data source using the Python SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting started with Python
     *         SDK</a>. For an example of creating an index and data source using the Java SDK, see
     *         <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java
     *         SDK</a>.</p>
     */
    createDataSource(args: CreateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataSourceCommandOutput>;
    createDataSource(args: CreateDataSourceCommandInput, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
    createDataSource(args: CreateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
    /**
     * <p>Creates an Amazon Kendra experience such as a search application. For more information
     *             on creating a search application experience, including using the Python and Java SDKs,
     *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
     *                 search experience with no code</a>.</p>
     */
    createExperience(args: CreateExperienceCommandInput, options?: __HttpHandlerOptions): Promise<CreateExperienceCommandOutput>;
    createExperience(args: CreateExperienceCommandInput, cb: (err: any, data?: CreateExperienceCommandOutput) => void): void;
    createExperience(args: CreateExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExperienceCommandOutput) => void): void;
    /**
     * <p>Creates an new set of frequently asked question (FAQ) questions and answers.</p>
     *          <p>Adding FAQs to an index is an asynchronous operation.</p>
     *          <p>For an example of adding an FAQ to an index using Python and Java SDKs,
     *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-creating-faq.html#using-faq-file">Using your
     *                 FAQ file</a>.</p>
     */
    createFaq(args: CreateFaqCommandInput, options?: __HttpHandlerOptions): Promise<CreateFaqCommandOutput>;
    createFaq(args: CreateFaqCommandInput, cb: (err: any, data?: CreateFaqCommandOutput) => void): void;
    createFaq(args: CreateFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFaqCommandOutput) => void): void;
    /**
     * <p>Creates an Amazon Kendra index. Index creation is an asynchronous API. To determine
     *       if index creation has completed, check the <code>Status</code> field returned from a call to
     *         <code>DescribeIndex</code>. The <code>Status</code> field is set to <code>ACTIVE</code> when
     *       the index is ready to use.</p>
     *          <p>Once the index is active you can index your documents using the
     *         <code>BatchPutDocument</code> API or using one of the supported data sources.</p>
     *          <p>For an example of creating an index and data source using the Python SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html">Getting started with Python
     *         SDK</a>. For an example of creating an index and data source using the Java SDK, see
     *         <a href="https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html">Getting started with Java
     *         SDK</a>.</p>
     */
    createIndex(args: CreateIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreateIndexCommandOutput>;
    createIndex(args: CreateIndexCommandInput, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
    createIndex(args: CreateIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIndexCommandOutput) => void): void;
    /**
     * <p>Creates a block list to exlcude certain queries from suggestions.</p>
     *          <p>Any query that contains words or phrases specified in the block
     *             list is blocked or filtered out from being shown as a suggestion.</p>
     *          <p>You need to provide the file location of your block list text file
     *             in your S3 bucket. In your text file, enter each block word or phrase
     *             on a separate line.</p>
     *          <p>For information on the current quota limits for block lists, see
     *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
     *                 for Amazon Kendra</a>.</p>
     *          <p>
     *             <code>CreateQuerySuggestionsBlockList</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     *          <p>For an example of creating a block list for query suggestions using the
     *             Python SDK, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/query-suggestions.html#suggestions-block-list">Query
     *                 suggestions block list</a>.</p>
     */
    createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<CreateQuerySuggestionsBlockListCommandOutput>;
    createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: CreateQuerySuggestionsBlockListCommandOutput) => void): void;
    createQuerySuggestionsBlockList(args: CreateQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateQuerySuggestionsBlockListCommandOutput) => void): void;
    /**
     * <p>Creates a thesaurus for an index. The thesaurus
     *       contains a list of synonyms in Solr format.</p>
     *          <p>For an example of adding a thesaurus file to an index, see
     *          <a href="https://docs.aws.amazon.com/kendra/latest/dg/index-synonyms-adding-thesaurus-file.html">Adding
     *             custom synonyms to an index</a>.</p>
     */
    createThesaurus(args: CreateThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<CreateThesaurusCommandOutput>;
    createThesaurus(args: CreateThesaurusCommandInput, cb: (err: any, data?: CreateThesaurusCommandOutput) => void): void;
    createThesaurus(args: CreateThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateThesaurusCommandOutput) => void): void;
    /**
     * <p>Deletes an access control configuration that you created for your
     *             documents in an index. This includes user and group access information
     *             for your documents. This is useful for user context filtering, where search
     *             results are filtered based on the user or their group access to documents.</p>
     */
    deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccessControlConfigurationCommandOutput>;
    deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, cb: (err: any, data?: DeleteAccessControlConfigurationCommandOutput) => void): void;
    deleteAccessControlConfiguration(args: DeleteAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccessControlConfigurationCommandOutput) => void): void;
    /**
     * <p>Deletes an Amazon Kendra data source connector. An exception is not thrown if the
     *       data source is already being deleted. While the data source is being deleted, the
     *         <code>Status</code> field returned by a call to the <code>DescribeDataSource</code> API is
     *       set to <code>DELETING</code>. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html">Deleting Data Sources</a>.</p>
     */
    deleteDataSource(args: DeleteDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataSourceCommandOutput>;
    deleteDataSource(args: DeleteDataSourceCommandInput, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
    deleteDataSource(args: DeleteDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
    /**
     * <p>Deletes your Amazon Kendra experience such as a search application. For more information on
     *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a search
     *                 experience with no code</a>.</p>
     */
    deleteExperience(args: DeleteExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExperienceCommandOutput>;
    deleteExperience(args: DeleteExperienceCommandInput, cb: (err: any, data?: DeleteExperienceCommandOutput) => void): void;
    deleteExperience(args: DeleteExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExperienceCommandOutput) => void): void;
    /**
     * <p>Removes an FAQ from an index.</p>
     */
    deleteFaq(args: DeleteFaqCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFaqCommandOutput>;
    deleteFaq(args: DeleteFaqCommandInput, cb: (err: any, data?: DeleteFaqCommandOutput) => void): void;
    deleteFaq(args: DeleteFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFaqCommandOutput) => void): void;
    /**
     * <p>Deletes an existing Amazon Kendra index. An exception is not thrown if the index is
     *       already being deleted. While the index is being deleted, the <code>Status</code> field
     *       returned by a call to the <code>DescribeIndex</code> API is set to
     *       <code>DELETING</code>.</p>
     */
    deleteIndex(args: DeleteIndexCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIndexCommandOutput>;
    deleteIndex(args: DeleteIndexCommandInput, cb: (err: any, data?: DeleteIndexCommandOutput) => void): void;
    deleteIndex(args: DeleteIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIndexCommandOutput) => void): void;
    /**
     * <p>Deletes a group so that all users and sub groups that belong to the group can
     *             no longer access documents only available to that group.</p>
     *          <p>For example, after deleting the group "Summer Interns", all interns who
     *             belonged to that group no longer see intern-only documents in their search
     *             results.</p>
     *          <p>If you want to delete or replace users or sub groups of a group, you need to
     *             use the <code>PutPrincipalMapping</code> operation. For example, if a user in
     *             the group "Engineering" leaves the engineering team and another user takes
     *             their place, you provide an updated list of users or sub groups that belong
     *             to the "Engineering" group when calling <code>PutPrincipalMapping</code>. You
     *             can update your internal list of users or sub groups and input this list
     *             when calling <code>PutPrincipalMapping</code>.</p>
     *          <p>
     *             <code>DeletePrincipalMapping</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<DeletePrincipalMappingCommandOutput>;
    deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, cb: (err: any, data?: DeletePrincipalMappingCommandOutput) => void): void;
    deletePrincipalMapping(args: DeletePrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePrincipalMappingCommandOutput) => void): void;
    /**
     * <p>Deletes a block list used for query suggestions for an index.</p>
     *          <p>A deleted block list might not take effect right away. Amazon Kendra
     *             needs to refresh the entire suggestions list to add back the
     *             queries that were previously blocked.</p>
     *          <p>
     *             <code>DeleteQuerySuggestionsBlockList</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<DeleteQuerySuggestionsBlockListCommandOutput>;
    deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: DeleteQuerySuggestionsBlockListCommandOutput) => void): void;
    deleteQuerySuggestionsBlockList(args: DeleteQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteQuerySuggestionsBlockListCommandOutput) => void): void;
    /**
     * <p>Deletes an existing Amazon Kendra thesaurus.
     *       </p>
     */
    deleteThesaurus(args: DeleteThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<DeleteThesaurusCommandOutput>;
    deleteThesaurus(args: DeleteThesaurusCommandInput, cb: (err: any, data?: DeleteThesaurusCommandOutput) => void): void;
    deleteThesaurus(args: DeleteThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteThesaurusCommandOutput) => void): void;
    /**
     * <p>Gets information about an access control configuration that you created for your
     *             documents in an index. This includes user and group access information for your
     *             documents. This is useful for user context filtering, where search results are
     *             filtered based on the user or their group access to documents.</p>
     */
    describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccessControlConfigurationCommandOutput>;
    describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, cb: (err: any, data?: DescribeAccessControlConfigurationCommandOutput) => void): void;
    describeAccessControlConfiguration(args: DescribeAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccessControlConfigurationCommandOutput) => void): void;
    /**
     * <p>Gets information about an Amazon Kendra data source connector.</p>
     */
    describeDataSource(args: DescribeDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDataSourceCommandOutput>;
    describeDataSource(args: DescribeDataSourceCommandInput, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
    describeDataSource(args: DescribeDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDataSourceCommandOutput) => void): void;
    /**
     * <p>Gets information about your Amazon Kendra experience such as a search application.
     *             For more information on creating a search application experience,
     *             see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
     *                 a search experience with no code</a>.</p>
     */
    describeExperience(args: DescribeExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeExperienceCommandOutput>;
    describeExperience(args: DescribeExperienceCommandInput, cb: (err: any, data?: DescribeExperienceCommandOutput) => void): void;
    describeExperience(args: DescribeExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeExperienceCommandOutput) => void): void;
    /**
     * <p>Gets information about an FAQ list.</p>
     */
    describeFaq(args: DescribeFaqCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFaqCommandOutput>;
    describeFaq(args: DescribeFaqCommandInput, cb: (err: any, data?: DescribeFaqCommandOutput) => void): void;
    describeFaq(args: DescribeFaqCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFaqCommandOutput) => void): void;
    /**
     * <p>Gets information about an existing Amazon Kendra index.</p>
     */
    describeIndex(args: DescribeIndexCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIndexCommandOutput>;
    describeIndex(args: DescribeIndexCommandInput, cb: (err: any, data?: DescribeIndexCommandOutput) => void): void;
    describeIndex(args: DescribeIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIndexCommandOutput) => void): void;
    /**
     * <p>Describes the processing of <code>PUT</code> and <code>DELETE</code> actions
     *             for mapping users to their groups. This includes information on the status of
     *             actions currently processing or yet to be processed, when actions were last updated,
     *             when actions were received by Amazon Kendra, the latest action that should process
     *             and apply after other actions, and useful error messages if an action could
     *             not be processed.</p>
     *          <p>
     *             <code>DescribePrincipalMapping</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    describePrincipalMapping(args: DescribePrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<DescribePrincipalMappingCommandOutput>;
    describePrincipalMapping(args: DescribePrincipalMappingCommandInput, cb: (err: any, data?: DescribePrincipalMappingCommandOutput) => void): void;
    describePrincipalMapping(args: DescribePrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePrincipalMappingCommandOutput) => void): void;
    /**
     * <p>Gets information about a block list used for query suggestions for
     *             an index.</p>
     *          <p>This is used to check the current settings that are applied to a
     *             block list.</p>
     *          <p>
     *             <code>DescribeQuerySuggestionsBlockList</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<DescribeQuerySuggestionsBlockListCommandOutput>;
    describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: DescribeQuerySuggestionsBlockListCommandOutput) => void): void;
    describeQuerySuggestionsBlockList(args: DescribeQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeQuerySuggestionsBlockListCommandOutput) => void): void;
    /**
     * <p>Gets information on the settings of query suggestions for an index.</p>
     *          <p>This is used to check the current settings applied
     *             to query suggestions.</p>
     *          <p>
     *             <code>DescribeQuerySuggestionsConfig</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeQuerySuggestionsConfigCommandOutput>;
    describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, cb: (err: any, data?: DescribeQuerySuggestionsConfigCommandOutput) => void): void;
    describeQuerySuggestionsConfig(args: DescribeQuerySuggestionsConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeQuerySuggestionsConfigCommandOutput) => void): void;
    /**
     * <p>Gets information about an existing Amazon Kendra thesaurus.</p>
     */
    describeThesaurus(args: DescribeThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeThesaurusCommandOutput>;
    describeThesaurus(args: DescribeThesaurusCommandInput, cb: (err: any, data?: DescribeThesaurusCommandOutput) => void): void;
    describeThesaurus(args: DescribeThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeThesaurusCommandOutput) => void): void;
    /**
     * <p>Prevents users or groups in your IAM Identity Center identity source
     *             from accessing your Amazon Kendra experience. You can create an Amazon Kendra experience
     *             such as a search application. For more information on creating a search
     *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
     *                 a search experience with no code</a>.</p>
     */
    disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateEntitiesFromExperienceCommandOutput>;
    disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, cb: (err: any, data?: DisassociateEntitiesFromExperienceCommandOutput) => void): void;
    disassociateEntitiesFromExperience(args: DisassociateEntitiesFromExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateEntitiesFromExperienceCommandOutput) => void): void;
    /**
     * <p>Removes the specific permissions of users or groups in your IAM Identity Center
     *             identity source with access to your Amazon Kendra experience. You can create an Amazon Kendra
     *             experience such as a search application. For more information on creating a
     *             search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
     *                 search experience with no code</a>.</p>
     */
    disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<DisassociatePersonasFromEntitiesCommandOutput>;
    disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, cb: (err: any, data?: DisassociatePersonasFromEntitiesCommandOutput) => void): void;
    disassociatePersonasFromEntities(args: DisassociatePersonasFromEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociatePersonasFromEntitiesCommandOutput) => void): void;
    /**
     * <p>Fetches the queries that are suggested to your users.</p>
     *          <p>
     *             <code>GetQuerySuggestions</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    getQuerySuggestions(args: GetQuerySuggestionsCommandInput, options?: __HttpHandlerOptions): Promise<GetQuerySuggestionsCommandOutput>;
    getQuerySuggestions(args: GetQuerySuggestionsCommandInput, cb: (err: any, data?: GetQuerySuggestionsCommandOutput) => void): void;
    getQuerySuggestions(args: GetQuerySuggestionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQuerySuggestionsCommandOutput) => void): void;
    /**
     * <p>Retrieves search metrics data. The data provides a snapshot of how
     *             your users interact with your search application and how effective
     *             the application is.</p>
     */
    getSnapshots(args: GetSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetSnapshotsCommandOutput>;
    getSnapshots(args: GetSnapshotsCommandInput, cb: (err: any, data?: GetSnapshotsCommandOutput) => void): void;
    getSnapshots(args: GetSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSnapshotsCommandOutput) => void): void;
    /**
     * <p>Lists one or more access control configurations for an index. This
     *             includes user and group access information for your documents. This
     *             is useful for user context filtering, where search results are filtered
     *             based on the user or their group access to documents.</p>
     */
    listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListAccessControlConfigurationsCommandOutput>;
    listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, cb: (err: any, data?: ListAccessControlConfigurationsCommandOutput) => void): void;
    listAccessControlConfigurations(args: ListAccessControlConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAccessControlConfigurationsCommandOutput) => void): void;
    /**
     * <p>Lists the data source connectors that you have created.</p>
     */
    listDataSources(args: ListDataSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourcesCommandOutput>;
    listDataSources(args: ListDataSourcesCommandInput, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
    listDataSources(args: ListDataSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
    /**
     * <p>Gets statistics about synchronizing a data source connector.</p>
     */
    listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourceSyncJobsCommandOutput>;
    listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, cb: (err: any, data?: ListDataSourceSyncJobsCommandOutput) => void): void;
    listDataSourceSyncJobs(args: ListDataSourceSyncJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourceSyncJobsCommandOutput) => void): void;
    /**
     * <p>Lists specific permissions of users and groups with access to your
     *             Amazon Kendra experience.</p>
     */
    listEntityPersonas(args: ListEntityPersonasCommandInput, options?: __HttpHandlerOptions): Promise<ListEntityPersonasCommandOutput>;
    listEntityPersonas(args: ListEntityPersonasCommandInput, cb: (err: any, data?: ListEntityPersonasCommandOutput) => void): void;
    listEntityPersonas(args: ListEntityPersonasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntityPersonasCommandOutput) => void): void;
    /**
     * <p>Lists users or groups in your IAM Identity Center identity source that are
     *             granted access to your Amazon Kendra experience. You can create an Amazon Kendra experience
     *             such as a search application. For more information on creating a search
     *             application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building
     *                 a search experience with no code</a>.</p>
     */
    listExperienceEntities(args: ListExperienceEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListExperienceEntitiesCommandOutput>;
    listExperienceEntities(args: ListExperienceEntitiesCommandInput, cb: (err: any, data?: ListExperienceEntitiesCommandOutput) => void): void;
    listExperienceEntities(args: ListExperienceEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperienceEntitiesCommandOutput) => void): void;
    /**
     * <p>Lists one or more Amazon Kendra experiences. You can create an Amazon Kendra experience such
     *             as a search application. For more information on creating a search application
     *             experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
     *                 search experience with no code</a>.</p>
     */
    listExperiences(args: ListExperiencesCommandInput, options?: __HttpHandlerOptions): Promise<ListExperiencesCommandOutput>;
    listExperiences(args: ListExperiencesCommandInput, cb: (err: any, data?: ListExperiencesCommandOutput) => void): void;
    listExperiences(args: ListExperiencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperiencesCommandOutput) => void): void;
    /**
     * <p>Gets a list of FAQ lists associated with an index.</p>
     */
    listFaqs(args: ListFaqsCommandInput, options?: __HttpHandlerOptions): Promise<ListFaqsCommandOutput>;
    listFaqs(args: ListFaqsCommandInput, cb: (err: any, data?: ListFaqsCommandOutput) => void): void;
    listFaqs(args: ListFaqsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFaqsCommandOutput) => void): void;
    /**
     * <p>Provides a list of groups that are mapped to users before a
     *             given ordering or timestamp identifier.</p>
     *          <p>
     *             <code>ListGroupsOlderThanOrderingId</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsOlderThanOrderingIdCommandOutput>;
    listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, cb: (err: any, data?: ListGroupsOlderThanOrderingIdCommandOutput) => void): void;
    listGroupsOlderThanOrderingId(args: ListGroupsOlderThanOrderingIdCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsOlderThanOrderingIdCommandOutput) => void): void;
    /**
     * <p>Lists the Amazon Kendra indexes that you created.</p>
     */
    listIndices(args: ListIndicesCommandInput, options?: __HttpHandlerOptions): Promise<ListIndicesCommandOutput>;
    listIndices(args: ListIndicesCommandInput, cb: (err: any, data?: ListIndicesCommandOutput) => void): void;
    listIndices(args: ListIndicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIndicesCommandOutput) => void): void;
    /**
     * <p>Lists the block lists used for query suggestions for an index.</p>
     *          <p>For information on the current quota limits for block lists, see
     *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/quotas.html">Quotas
     *                 for Amazon Kendra</a>.</p>
     *          <p>
     *             <code>ListQuerySuggestionsBlockLists</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, options?: __HttpHandlerOptions): Promise<ListQuerySuggestionsBlockListsCommandOutput>;
    listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, cb: (err: any, data?: ListQuerySuggestionsBlockListsCommandOutput) => void): void;
    listQuerySuggestionsBlockLists(args: ListQuerySuggestionsBlockListsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQuerySuggestionsBlockListsCommandOutput) => void): void;
    /**
     * <p>Gets a list of tags associated with a specified resource. Indexes,
     *       FAQs, and data sources can have tags associated with them.</p>
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * <p>Lists the thesauri for an index.</p>
     */
    listThesauri(args: ListThesauriCommandInput, options?: __HttpHandlerOptions): Promise<ListThesauriCommandOutput>;
    listThesauri(args: ListThesauriCommandInput, cb: (err: any, data?: ListThesauriCommandOutput) => void): void;
    listThesauri(args: ListThesauriCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThesauriCommandOutput) => void): void;
    /**
     * <p>Maps users to their groups so that you only need to provide
     *             the user ID when you issue the query.</p>
     *          <p>You can also map sub groups to groups.
     *             For example, the group "Company Intellectual Property Teams" includes
     *             sub groups "Research" and "Engineering". These sub groups include their
     *             own list of users or people who work in these teams. Only users who work
     *             in research and engineering, and therefore belong in the intellectual
     *             property group, can see top-secret company documents in their search
     *             results.</p>
     *          <p>This is useful for user context filtering, where search results are
     *             filtered based on the user or their group access to documents. For more
     *             information, see
     *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html">Filtering
     *                 on user context</a>.</p>
     *          <p>If more than five <code>PUT</code> actions for a group are currently
     *             processing, a validation exception is thrown.</p>
     *          <p>
     *             <code>PutPrincipalMapping</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    putPrincipalMapping(args: PutPrincipalMappingCommandInput, options?: __HttpHandlerOptions): Promise<PutPrincipalMappingCommandOutput>;
    putPrincipalMapping(args: PutPrincipalMappingCommandInput, cb: (err: any, data?: PutPrincipalMappingCommandOutput) => void): void;
    putPrincipalMapping(args: PutPrincipalMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPrincipalMappingCommandOutput) => void): void;
    /**
     * <p>Searches an active index. Use this API to search your documents using query. The
     *             <code>Query</code> API enables to do faceted search and to filter results based on
     *          document attributes.</p>
     *          <p>It also enables you to provide user context that Amazon Kendra uses to enforce
     *          document access control in the search results.</p>
     *          <p>Amazon Kendra searches your index for text content and question and answer (FAQ)
     *          content. By default the response contains three types of results.</p>
     *          <ul>
     *             <li>
     *                <p>Relevant passages</p>
     *             </li>
     *             <li>
     *                <p>Matching FAQs</p>
     *             </li>
     *             <li>
     *                <p>Relevant documents</p>
     *             </li>
     *          </ul>
     *          <p>You can specify that the query return only one type of result using the
     *             <code>QueryResultTypeFilter</code> parameter.</p>
     *          <p>Each query returns the 100 most relevant results. </p>
     */
    query(args: QueryCommandInput, options?: __HttpHandlerOptions): Promise<QueryCommandOutput>;
    query(args: QueryCommandInput, cb: (err: any, data?: QueryCommandOutput) => void): void;
    query(args: QueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryCommandOutput) => void): void;
    /**
     * <p>Starts a synchronization job for a data source connector. If a synchronization job is
     *       already in progress, Amazon Kendra returns a <code>ResourceInUseException</code>
     *       exception.</p>
     */
    startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, options?: __HttpHandlerOptions): Promise<StartDataSourceSyncJobCommandOutput>;
    startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, cb: (err: any, data?: StartDataSourceSyncJobCommandOutput) => void): void;
    startDataSourceSyncJob(args: StartDataSourceSyncJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDataSourceSyncJobCommandOutput) => void): void;
    /**
     * <p>Stops a synchronization job that is currently running. You can't stop a scheduled
     *       synchronization job.</p>
     */
    stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, options?: __HttpHandlerOptions): Promise<StopDataSourceSyncJobCommandOutput>;
    stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, cb: (err: any, data?: StopDataSourceSyncJobCommandOutput) => void): void;
    stopDataSourceSyncJob(args: StopDataSourceSyncJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDataSourceSyncJobCommandOutput) => void): void;
    /**
     * <p>Enables you to provide feedback to Amazon Kendra to improve the
     *             performance of your index.</p>
     *          <p>
     *             <code>SubmitFeedback</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    submitFeedback(args: SubmitFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<SubmitFeedbackCommandOutput>;
    submitFeedback(args: SubmitFeedbackCommandInput, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
    submitFeedback(args: SubmitFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SubmitFeedbackCommandOutput) => void): void;
    /**
     * <p>Adds the specified tag to the specified index, FAQ, or data source
     *       resource. If the tag already exists, the existing value is replaced with
     *       the new value.</p>
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * <p>Removes a tag from an index, FAQ, or a data source.</p>
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * <p>Updates an access control configuration for your documents in an index. This
     *             includes user and group access information for your documents. This is useful
     *             for user context filtering, where search results are filtered based on the user
     *             or their group access to documents.</p>
     *          <p>You can update an access control configuration you created without indexing all
     *             of your documents again. For example, your index contains top-secret company
     *             documents that only certain employees or users should access. You created an 'allow'
     *             access control configuration for one user who recently joined the 'top-secret' team,
     *             switching from a team with 'deny' access to top-secret documents. However, the user
     *             suddenly returns to their previous team and should no longer have access to top secret
     *             documents. You can update the access control configuration to re-configure access
     *             control for your documents as circumstances change.</p>
     *          <p>You call the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">BatchPutDocument</a> API to
     *             apply the updated access control configuration, with the
     *                 <code>AccessControlConfigurationId</code> included in the
     *             <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Document.html">Document</a>
     *             object. If you use an S3 bucket as a data source, you synchronize your data source to
     *             apply the <code>AccessControlConfigurationId</code> in the <code>.metadata.json</code> file.
     *             Amazon Kendra currently only supports access control configuration for S3 data
     *             sources and documents indexed using the <code>BatchPutDocument</code> API.</p>
     */
    updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccessControlConfigurationCommandOutput>;
    updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, cb: (err: any, data?: UpdateAccessControlConfigurationCommandOutput) => void): void;
    updateAccessControlConfiguration(args: UpdateAccessControlConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccessControlConfigurationCommandOutput) => void): void;
    /**
     * <p>Updates an existing Amazon Kendra data source connector.</p>
     */
    updateDataSource(args: UpdateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSourceCommandOutput>;
    updateDataSource(args: UpdateDataSourceCommandInput, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
    updateDataSource(args: UpdateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
    /**
     * <p>Updates your Amazon Kendra experience such as a search application. For more information on
     *             creating a search application experience, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/deploying-search-experience-no-code.html">Building a
     *                 search experience with no code</a>.</p>
     */
    updateExperience(args: UpdateExperienceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExperienceCommandOutput>;
    updateExperience(args: UpdateExperienceCommandInput, cb: (err: any, data?: UpdateExperienceCommandOutput) => void): void;
    updateExperience(args: UpdateExperienceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExperienceCommandOutput) => void): void;
    /**
     * <p>Updates an existing Amazon Kendra index.</p>
     */
    updateIndex(args: UpdateIndexCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIndexCommandOutput>;
    updateIndex(args: UpdateIndexCommandInput, cb: (err: any, data?: UpdateIndexCommandOutput) => void): void;
    updateIndex(args: UpdateIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIndexCommandOutput) => void): void;
    /**
     * <p>Updates a block list used for query suggestions for an index.</p>
     *          <p>Updates to a block list might not take effect right away. Amazon Kendra
     *             needs to refresh the entire suggestions list to apply any updates to the
     *             block list. Other changes not related to the block list apply immediately.</p>
     *          <p>If a block list is updating, then you need to wait for the first update to
     *             finish before submitting another update.</p>
     *          <p>Amazon Kendra supports partial updates, so you only need to provide the fields
     *             you want to update.</p>
     *          <p>
     *             <code>UpdateQuerySuggestionsBlockList</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, options?: __HttpHandlerOptions): Promise<UpdateQuerySuggestionsBlockListCommandOutput>;
    updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, cb: (err: any, data?: UpdateQuerySuggestionsBlockListCommandOutput) => void): void;
    updateQuerySuggestionsBlockList(args: UpdateQuerySuggestionsBlockListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateQuerySuggestionsBlockListCommandOutput) => void): void;
    /**
     * <p>Updates the settings of query suggestions for an index.</p>
     *          <p>Amazon Kendra supports partial updates, so you only need to provide
     *             the fields you want to update.</p>
     *          <p>If an update is currently processing (i.e. 'happening'), you
     *             need to wait for the update to finish before making another update.</p>
     *          <p>Updates to query suggestions settings might not take effect right away.
     *             The time for your updated settings to take effect depends on the updates
     *             made and the number of search queries in your index.</p>
     *          <p>You can still enable/disable query suggestions at any time.</p>
     *          <p>
     *             <code>UpdateQuerySuggestionsConfig</code> is currently not supported in the
     *             Amazon Web Services GovCloud (US-West) region.</p>
     */
    updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateQuerySuggestionsConfigCommandOutput>;
    updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, cb: (err: any, data?: UpdateQuerySuggestionsConfigCommandOutput) => void): void;
    updateQuerySuggestionsConfig(args: UpdateQuerySuggestionsConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateQuerySuggestionsConfigCommandOutput) => void): void;
    /**
     * <p>Updates a thesaurus for an index.</p>
     */
    updateThesaurus(args: UpdateThesaurusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateThesaurusCommandOutput>;
    updateThesaurus(args: UpdateThesaurusCommandInput, cb: (err: any, data?: UpdateThesaurusCommandOutput) => void): void;
    updateThesaurus(args: UpdateThesaurusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateThesaurusCommandOutput) => void): void;
}
