import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { KendraClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../KendraClient";
import { BatchGetDocumentStatusRequest, BatchGetDocumentStatusResponse } from "../models/models_0";
export interface BatchGetDocumentStatusCommandInput extends BatchGetDocumentStatusRequest {
}
export interface BatchGetDocumentStatusCommandOutput extends BatchGetDocumentStatusResponse, __MetadataBearer {
}
/**
 * <p>Returns the indexing status for one or more documents submitted
 *             with the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchPutDocument.html">
 *                 BatchPutDocument</a> API.</p>
 *          <p>When you use the <code>BatchPutDocument</code> API,
 *             documents are indexed asynchronously. You can use the
 *                 <code>BatchGetDocumentStatus</code> API to get the current
 *             status of a list of documents so that you can determine if they have
 *             been successfully indexed.</p>
 *          <p>You can also use the <code>BatchGetDocumentStatus</code> API
 *             to check the status of the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_BatchDeleteDocument.html">
 *                 BatchDeleteDocument</a> API. When a document is
 *             deleted from the index, Amazon Kendra returns <code>NOT_FOUND</code> as the
 *             status.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { KendraClient, BatchGetDocumentStatusCommand } from "@aws-sdk/client-kendra"; // ES Modules import
 * // const { KendraClient, BatchGetDocumentStatusCommand } = require("@aws-sdk/client-kendra"); // CommonJS import
 * const client = new KendraClient(config);
 * const command = new BatchGetDocumentStatusCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link BatchGetDocumentStatusCommandInput} for command's `input` shape.
 * @see {@link BatchGetDocumentStatusCommandOutput} for command's `response` shape.
 * @see {@link KendraClientResolvedConfig | config} for KendraClient's `config` shape.
 *
 */
export declare class BatchGetDocumentStatusCommand extends $Command<BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput, KendraClientResolvedConfig> {
    readonly input: BatchGetDocumentStatusCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: BatchGetDocumentStatusCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KendraClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetDocumentStatusCommandInput, BatchGetDocumentStatusCommandOutput>;
    private serialize;
    private deserialize;
}
